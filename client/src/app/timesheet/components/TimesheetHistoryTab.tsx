import { useQuery, useMutation } from "@tanstack/react-query";
import { useState } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table";
import { Input } from "@/components/ui/input";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Dialog, DialogContent, DialogHeader, DialogTitle } from "@/components/ui/dialog";
import { Download, FileText, Eye, Calendar, User, DollarSign, Clock, Search, Filter } from "lucide-react";
import { format } from "date-fns";
import { queryClient } from "@/lib/queryClient";
import { useToast } from "@/hooks/use-toast";

interface TimesheetHistoryItem {
  id: number;
  userId: number;
  userName: string;
  userEmail: string;
  payPeriodStart: string;
  payPeriodEnd: string;
  status: string;
  totalHours: string;
  totalEarnings: string;
  totalTax: string;
  netPay: string;
  submittedAt: string;
  approvedAt: string;
  employmentType: string;
  payLevel: string;
  payPoint: string;
}

interface TimesheetEntry {
  id: number;
  entryDate: string;
  startTime: string;
  endTime: string;
  breakMinutes: number;
  totalHours: string;
  hourlyRate: string;
  grossPay: string;
  isAutoGenerated: boolean;
  notes?: string;
  shiftId?: number;
  shiftTitle?: string;
  shiftDescription?: string;
  clientName?: string;
  clientId?: number;
}

export default function TimesheetHistoryTab() {
  const [searchTerm, setSearchTerm] = useState("");
  const [statusFilter, setStatusFilter] = useState("all");
  const [selectedTimesheet, setSelectedTimesheet] = useState<TimesheetHistoryItem | null>(null);

  const [isViewDialogOpen, setIsViewDialogOpen] = useState(false);
  const { toast } = useToast();

  // Fetch all timesheets history
  const { data: timesheetHistory = [], isLoading } = useQuery<TimesheetHistoryItem[]>({
    queryKey: ["/api/admin/timesheets/history"],
  });

  // Fetch detailed timesheet data when viewing (same data as PDF export)
  const { data: timesheetData, isLoading: entriesLoading } = useQuery({
    queryKey: [`/api/admin/timesheets/${selectedTimesheet?.id}/export-pdf`],
    enabled: !!selectedTimesheet && isViewDialogOpen,
  });

  // Individual timesheet PDF export
  const exportTimesheetMutation = useMutation({
    mutationFn: async (timesheetId: number) => {
      const response = await fetch(`/api/admin/timesheets/${timesheetId}/export-pdf`);
      if (!response.ok) throw new Error("Failed to export timesheet");
      
      const data = await response.json();
      
      // Import jsPDF dynamically
      const { jsPDF } = await import('jspdf');
      const pdf = new jsPDF();
      
      // Company header
      pdf.setFontSize(18);
      pdf.setFont("helvetica", "bold");
      pdf.text(data.company?.name || 'Company Name', 20, 25);
      
      pdf.setFontSize(10);
      pdf.setFont("helvetica", "normal");
      if (data.company?.businessAddress) {
        const addressLines = data.company.businessAddress.split('\n');
        addressLines.forEach((line: string, index: number) => {
          pdf.text(line, 20, 35 + (index * 5));
        });
      }
      
      // Timesheet title
      pdf.setFontSize(16);
      pdf.setFont("helvetica", "bold");
      pdf.text("TIMESHEET REPORT", 20, 65);
      
      // Employee details
      pdf.setFontSize(12);
      pdf.setFont("helvetica", "normal");
      pdf.text(`Staff Member: ${data.timesheet.userName}`, 20, 80);
      pdf.text(`Email: ${data.timesheet.userEmail}`, 20, 90);
      pdf.text(`Employment Type: ${data.timesheet.employmentType}`, 20, 100);
      pdf.text(`Pay Level: ${data.timesheet.payLevel}.${data.timesheet.payPoint}`, 20, 110);
      
      // Pay period
      pdf.text(`Pay Period: ${data.timesheet.payPeriodStart} to ${data.timesheet.payPeriodEnd}`, 20, 125);
      pdf.text(`Status: ${data.timesheet.status.toUpperCase()}`, 20, 135);
      
      // Summary totals
      pdf.setFont("helvetica", "bold");
      pdf.text("SUMMARY", 20, 155);
      pdf.setFont("helvetica", "normal");
      pdf.text(`Total Hours: ${data.timesheet.totalHours}`, 20, 165);
      pdf.text(`Gross Pay: $${data.timesheet.totalEarnings}`, 20, 175);
      pdf.text(`Tax: $${data.timesheet.totalTax}`, 20, 185);
      pdf.text(`Net Pay: $${data.timesheet.netPay}`, 20, 195);
      
      // Entries table header
      let yPos = 215;
      pdf.setFont("helvetica", "bold");
      pdf.text("SHIFT DETAILS", 20, yPos);
      yPos += 15;
      
      // Table headers
      pdf.setFontSize(9);
      pdf.text("Date", 20, yPos);
      pdf.text("Start", 50, yPos);
      pdf.text("End", 75, yPos);
      pdf.text("Break", 95, yPos);
      pdf.text("Hours", 115, yPos);
      pdf.text("Rate", 135, yPos);
      pdf.text("Gross", 155, yPos);
      pdf.text("Client", 175, yPos);
      
      yPos += 5;
      pdf.line(20, yPos, 190, yPos); // Header line
      yPos += 10;
      
      // Table data
      pdf.setFont("helvetica", "normal");
      data.entries.forEach((entry: any) => {
        if (yPos > 270) { // New page if needed
          pdf.addPage();
          yPos = 30;
        }
        
        pdf.text(entry.entryDate, 20, yPos);
        pdf.text(entry.startTime, 50, yPos);
        pdf.text(entry.endTime, 75, yPos);
        pdf.text(`${entry.breakMinutes}m`, 95, yPos);
        pdf.text(`${entry.totalHours}h`, 115, yPos);
        pdf.text(`$${entry.hourlyRate}`, 135, yPos);
        pdf.text(`$${entry.grossPay}`, 155, yPos);
        pdf.text(entry.clientName || 'N/A', 175, yPos);
        
        yPos += 10;
      });
      
      // Footer
      pdf.setFontSize(8);
      pdf.text(`Exported by: ${data.exportedBy}`, 20, 280);
      pdf.text(`Export Date: ${new Date(data.exportedAt).toLocaleDateString()}`, 120, 280);
      
      // Save the PDF
      pdf.save(`timesheet-${data.timesheet.userName}-${data.timesheet.payPeriodStart}.pdf`);
    },
    onSuccess: () => {
      toast({
        title: "Success",
        description: "Timesheet exported successfully",
      });
    },
    onError: () => {
      toast({
        title: "Error",
        description: "Failed to export timesheet",
        variant: "destructive",
      });
    },
  });

  // Bulk export functionality  
  const bulkExportMutation = useMutation({
    mutationFn: async (filters: { status?: string; dateRange?: string }) => {
      const params = new URLSearchParams();
      if (filters.status && filters.status !== 'all') params.append('status', filters.status);
      if (filters.dateRange) params.append('dateRange', filters.dateRange);
      
      const response = await fetch(`/api/admin/timesheets/bulk-export?${params}`);
      if (!response.ok) throw new Error("Failed to export timesheets");
      
      const data = await response.json();
      
      // Generate CSV format for bulk export
      const csvContent = [
        // CSV Header
        'Staff Name,Email,Pay Period Start,Pay Period End,Status,Total Hours,Gross Pay,Net Pay,Employment Type,Pay Level'
      ];
      
      // Add timesheet data
      data.timesheets.forEach((timesheet: any) => {
        csvContent.push([
          timesheet.userName,
          timesheet.userEmail,
          timesheet.payPeriodStart,
          timesheet.payPeriodEnd,
          timesheet.status,
          timesheet.totalHours,
          timesheet.totalEarnings,
          timesheet.netPay,
          timesheet.employmentType,
          `${timesheet.payLevel}.${timesheet.payPoint}`
        ].join(','));
      });
      
      const csvBlob = new Blob([csvContent.join('\n')], { type: 'text/csv' });
      const url = window.URL.createObjectURL(csvBlob);
      const a = document.createElement('a');
      a.href = url;
      a.download = `timesheets-bulk-export-${new Date().toISOString().split('T')[0]}.csv`;
      document.body.appendChild(a);
      a.click();
      window.URL.revokeObjectURL(url);
      document.body.removeChild(a);
    },
    onSuccess: () => {
      toast({
        title: "Success",
        description: "Bulk export completed successfully",
      });
    },
    onError: () => {
      toast({
        title: "Error", 
        description: "Failed to export timesheets",
        variant: "destructive",
      });
    },
  });

  const getStatusBadge = (status: string) => {
    const variants = {
      draft: "bg-gray-100 text-gray-800",
      submitted: "bg-yellow-100 text-yellow-800",
      approved: "bg-green-100 text-green-800",
      rejected: "bg-red-100 text-red-800",
      paid: "bg-blue-100 text-blue-800"
    };
    
    return (
      <Badge className={variants[status as keyof typeof variants] || "bg-gray-100 text-gray-800"}>
        {status.charAt(0).toUpperCase() + status.slice(1)}
      </Badge>
    );
  };

  const formatCurrency = (amount: string | number) => {
    return new Intl.NumberFormat('en-AU', {
      style: 'currency',
      currency: 'AUD',
    }).format(parseFloat(amount.toString()));
  };

  const formatDate = (dateStr: string) => {
    return format(new Date(dateStr), 'dd/MM/yyyy');
  };

  // Filter timesheets based on search and status
  const filteredTimesheets = (timesheetHistory as TimesheetHistoryItem[]).filter((timesheet: TimesheetHistoryItem) => {
    const matchesSearch = searchTerm === "" || 
      timesheet.userName.toLowerCase().includes(searchTerm.toLowerCase()) ||
      timesheet.userEmail.toLowerCase().includes(searchTerm.toLowerCase());
    
    const matchesStatus = statusFilter === "all" || timesheet.status === statusFilter;
    
    return matchesSearch && matchesStatus;
  });

  if (isLoading) {
    return (
      <Card>
        <CardContent className="p-6">
          <div className="text-center">
            <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto"></div>
            <p className="mt-2 text-gray-600">Loading timesheet history...</p>
          </div>
        </CardContent>
      </Card>
    );
  }

  return (
    <div className="space-y-6">
      <Card>
        <CardHeader>
          <div className="flex justify-between items-center">
            <div>
              <CardTitle className="flex items-center gap-2">
                <Calendar className="h-5 w-5" />
                Timesheet History
              </CardTitle>
              <p className="text-sm text-gray-600 mt-1">
                View and export all historical timesheets across your organization
              </p>
            </div>
            
            {/* Bulk Export Button */}
            <Button
              onClick={() => bulkExportMutation.mutate({ status: statusFilter })}
              disabled={bulkExportMutation.isPending}
              className="flex items-center gap-2 bg-blue-600 hover:bg-blue-700"
            >
              <Download className="h-4 w-4" />
              {bulkExportMutation.isPending ? 'Exporting...' : 'Bulk Export'}
            </Button>
          </div>
        </CardHeader>
        
        <CardContent>
          {/* Filters */}
          <div className="flex gap-4 mb-6">
            <div className="flex-1">
              <div className="relative">
                <Search className="absolute left-3 top-3 h-4 w-4 text-gray-400" />
                <Input
                  placeholder="Search by staff name or email..."
                  value={searchTerm}
                  onChange={(e) => setSearchTerm(e.target.value)}
                  className="pl-10"
                />
              </div>
            </div>
            
            <Select value={statusFilter} onValueChange={setStatusFilter}>
              <SelectTrigger className="w-48">
                <Filter className="h-4 w-4 mr-2" />
                <SelectValue placeholder="Filter by status" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="all">All Status</SelectItem>
                <SelectItem value="draft">Draft</SelectItem>
                <SelectItem value="submitted">Submitted</SelectItem>
                <SelectItem value="approved">Approved</SelectItem>
                <SelectItem value="rejected">Rejected</SelectItem>
                <SelectItem value="paid">Paid</SelectItem>
              </SelectContent>
            </Select>
          </div>

          {/* Results Summary */}
          <div className="mb-4 text-sm text-gray-600">
            Showing {filteredTimesheets.length} of {(timesheetHistory as TimesheetHistoryItem[]).length} timesheets
          </div>

          {/* Timesheets Table */}
          {filteredTimesheets.length === 0 ? (
            <div className="text-center py-8">
              <FileText className="h-12 w-12 text-gray-400 mx-auto mb-4" />
              <p className="text-gray-600">No timesheets found matching your criteria.</p>
            </div>
          ) : (
            <div className="border rounded-lg overflow-hidden">
              <Table>
                <TableHeader>
                  <TableRow>
                    <TableHead>Staff Member</TableHead>
                    <TableHead>Pay Period</TableHead>
                    <TableHead>Status</TableHead>
                    <TableHead className="text-right">Hours</TableHead>
                    <TableHead className="text-right">Gross Pay</TableHead>
                    <TableHead className="text-right">Net Pay</TableHead>
                    <TableHead>Employment</TableHead>
                    <TableHead className="text-center">Actions</TableHead>
                  </TableRow>
                </TableHeader>
                <TableBody>
                  {filteredTimesheets.map((timesheet: TimesheetHistoryItem) => (
                    <TableRow key={timesheet.id}>
                      <TableCell>
                        <div>
                          <div className="font-medium">{timesheet.userName}</div>
                          <div className="text-sm text-gray-600">{timesheet.userEmail}</div>
                        </div>
                      </TableCell>
                      <TableCell>
                        <div className="text-sm">
                          {formatDate(timesheet.payPeriodStart)} - {formatDate(timesheet.payPeriodEnd)}
                        </div>
                      </TableCell>
                      <TableCell>
                        {getStatusBadge(timesheet.status)}
                      </TableCell>
                      <TableCell className="text-right font-mono">
                        {parseFloat(timesheet.totalHours).toFixed(1)}h
                      </TableCell>
                      <TableCell className="text-right font-mono">
                        {formatCurrency(timesheet.totalEarnings)}
                      </TableCell>
                      <TableCell className="text-right font-mono">
                        {formatCurrency(timesheet.netPay)}
                      </TableCell>
                      <TableCell>
                        <div className="text-sm">
                          <div>{timesheet.employmentType}</div>
                          <div className="text-gray-600">{timesheet.payLevel}.{timesheet.payPoint}</div>
                        </div>
                      </TableCell>
                      <TableCell>
                        <div className="flex gap-2 justify-center">
                          <Button
                            size="sm"
                            variant="outline"
                            onClick={() => {
                              setSelectedTimesheet(timesheet);
                              setIsViewDialogOpen(true);
                            }}
                            className="flex items-center gap-1"
                          >
                            <Eye className="h-3 w-3" />
                            View
                          </Button>
                          
                          <Button
                            size="sm"
                            onClick={() => exportTimesheetMutation.mutate(timesheet.id)}
                            disabled={exportTimesheetMutation.isPending}
                            className="flex items-center gap-1 bg-green-600 hover:bg-green-700"
                          >
                            <Download className="h-3 w-3" />
                            PDF
                          </Button>
                        </div>
                      </TableCell>
                    </TableRow>
                  ))}
                </TableBody>
              </Table>
            </div>
          )}
        </CardContent>
      </Card>

      {/* View Timesheet Dialog */}
      <Dialog open={isViewDialogOpen} onOpenChange={setIsViewDialogOpen}>
        <DialogContent className="max-w-6xl max-h-[90vh] overflow-y-auto">
          <DialogHeader>
            <DialogTitle className="flex items-center gap-2">
              <User className="h-5 w-5" />
              Timesheet Details - {selectedTimesheet?.userName}
            </DialogTitle>
          </DialogHeader>
          {selectedTimesheet && (
            <div className="space-y-6">
              {/* Timesheet Summary */}
              <div className="grid grid-cols-2 md:grid-cols-4 gap-4 p-4 bg-slate-50 rounded-lg">
                <div>
                  <span className="text-sm text-slate-600">Pay Period:</span>
                  <div className="font-medium">
                    {formatDate(selectedTimesheet.payPeriodStart)} - {formatDate(selectedTimesheet.payPeriodEnd)}
                  </div>
                </div>
                <div>
                  <span className="text-sm text-slate-600">Total Hours:</span>
                  <div className="font-medium text-lg">{selectedTimesheet.totalHours}h</div>
                </div>
                <div>
                  <span className="text-sm text-slate-600">Gross Pay:</span>
                  <div className="font-medium text-lg text-green-600">{formatCurrency(selectedTimesheet.totalEarnings)}</div>
                </div>
                <div>
                  <span className="text-sm text-slate-600">Status:</span>
                  <div>{getStatusBadge(selectedTimesheet.status)}</div>
                </div>
              </div>

              {/* Individual Shift Earnings */}
              <Card className="border-2 border-slate-200 shadow-sm">
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    <Calendar className="h-5 w-5" />
                    Individual Shift Earnings
                  </CardTitle>
                </CardHeader>
                <CardContent>
                  {entriesLoading ? (
                    <div className="text-center py-8">
                      <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto"></div>
                      <p className="mt-2 text-gray-600">Loading shift details...</p>
                    </div>
                  ) : timesheetData?.entries && timesheetData.entries.length > 0 ? (
                    <div className="overflow-x-auto">
                      <Table>
                        <TableHeader>
                          <TableRow>
                            <TableHead>Date</TableHead>
                            <TableHead>Shift</TableHead>
                            <TableHead>Client</TableHead>
                            <TableHead>Hours</TableHead>
                            <TableHead>Rate</TableHead>
                            <TableHead>Earnings</TableHead>
                            <TableHead>Type</TableHead>
                          </TableRow>
                        </TableHeader>
                        <TableBody>
                          {timesheetData.entries.map((entry: any, index: number) => (
                            <TableRow key={entry.id || index}>
                              <TableCell>{formatDate(entry.entryDate)}</TableCell>
                              <TableCell>
                                <div className="font-medium">{entry.shiftTitle || 'General Shift'}</div>
                                <div className="text-xs text-gray-500">
                                  {entry.startTime} - {entry.endTime}
                                </div>
                              </TableCell>
                              <TableCell>{entry.clientName || 'N/A'}</TableCell>
                              <TableCell className="font-mono">{entry.totalHours}h</TableCell>
                              <TableCell className="font-mono">{formatCurrency(entry.hourlyRate)}</TableCell>
                              <TableCell className="font-mono font-medium">{formatCurrency(entry.grossPay)}</TableCell>
                              <TableCell>
                                <Badge variant={entry.isAutoGenerated ? "default" : "outline"}>
                                  {entry.isAutoGenerated ? "Auto" : "Manual"}
                                </Badge>
                              </TableCell>
                            </TableRow>
                          ))}
                        </TableBody>
                      </Table>
                    </div>
                  ) : (
                    <div className="text-center py-8">
                      <FileText className="h-12 w-12 text-gray-400 mx-auto mb-4" />
                      <p className="text-gray-600">No shift entries found for this timesheet.</p>
                    </div>
                  )}
                </CardContent>
              </Card>

              {/* Summary Details */}
              <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
                <Card>
                  <CardContent className="p-4">
                    <div className="text-sm text-slate-600">Employment Type</div>
                    <div className="font-medium">{selectedTimesheet.employmentType}</div>
                  </CardContent>
                </Card>
                <Card>
                  <CardContent className="p-4">
                    <div className="text-sm text-slate-600">Pay Classification</div>
                    <div className="font-medium">{selectedTimesheet.payLevel}.{selectedTimesheet.payPoint}</div>
                  </CardContent>
                </Card>
                <Card>
                  <CardContent className="p-4">
                    <div className="text-sm text-slate-600">Tax Withheld</div>
                    <div className="font-medium">{formatCurrency(selectedTimesheet.totalTax)}</div>
                  </CardContent>
                </Card>
                <Card>
                  <CardContent className="p-4">
                    <div className="text-sm text-slate-600">Net Pay</div>
                    <div className="font-medium text-green-600">{formatCurrency(selectedTimesheet.netPay)}</div>
                  </CardContent>
                </Card>
              </div>
            </div>
          )}
        </DialogContent>
      </Dialog>
    </div>
  );
}