import { useState } from "react";
import { useQuery, useMutation, useQueryClient } from "@tanstack/react-query";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Input } from "@/components/ui/input";
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from "@/components/ui/dialog";
import { Separator } from "@/components/ui/separator";
import { 
  Clock, 
  DollarSign, 
  CheckCircle, 
  AlertCircle, 
  FileText, 
  Download,
  Calendar,
  TrendingUp,
  Edit,
  Search,
  User,
  Users,
  FileDown,
  Eye,
  Plus,
  Trash2
} from "lucide-react";
import { useAuth } from "@/hooks/use-auth";
import { useToast } from "@/hooks/use-toast";
import { useForm } from "react-hook-form";
import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from "@/components/ui/form";
import { Textarea } from "@/components/ui/textarea";
import { apiRequest } from "@/lib/queryClient";
import { format } from "date-fns";
import { ApprovalBadge } from "@/components/ui/approval-badge";
import PayScaleManagement from "@/app/admin/PayScaleManagement";
import WageIncreaseManager from "@/app/admin/WageIncreaseManager";

interface AdminTimesheet {
  id: number;
  userId: number;
  staffName: string;
  staffUsername: string;
  staffEmail: string;
  payPeriodStart: string;
  payPeriodEnd: string;
  status: 'draft' | 'submitted' | 'approved' | 'rejected';
  totalHours: string;
  totalEarnings: string;
  totalTax: string;
  totalSuper: string;
  netPay: string;
  submittedAt?: string;
  approvedAt?: string;
  createdAt: string;
  annualLeave?: number;
  sickLeave?: number;
  personalLeave?: number;
  longServiceLeave?: number;
}

interface TimesheetEntry {
  id: number;
  shiftId: number;
  entryDate: string;
  startTime: string;
  endTime: string;
  breakMinutes: number;
  totalHours: number;
  hourlyRate: number;
  grossPay: number;
  isAutoGenerated: boolean;
  notes?: string;
  shiftTitle?: string;
  clientName?: string;
}

// Timesheet Entry Form Component
interface TimesheetEntryFormProps {
  entry: any;
  onSave: (data: any) => void;
  onCancel: () => void;
  loading: boolean;
}

function TimesheetEntryForm({ entry, onSave, onCancel, loading }: TimesheetEntryFormProps) {
  const form = useForm({
    defaultValues: {
      entryDate: entry.entryDate || new Date().toISOString().split('T')[0],
      startTime: entry.startTime || '09:00',
      endTime: entry.endTime || '17:00',
      breakMinutes: entry.breakMinutes || 30,
      hourlyRate: entry.hourlyRate || 25.41,
      notes: entry.notes || ''
    }
  });

  const onSubmit = (data: any) => {
    // Calculate total hours
    const startMinutes = timeToMinutes(data.startTime);
    const endMinutes = timeToMinutes(data.endTime);
    const workedMinutes = endMinutes - startMinutes - (data.breakMinutes || 0);
    const totalHours = Math.max(0, workedMinutes / 60);
    const grossPay = totalHours * data.hourlyRate;

    onSave({
      ...data,
      totalHours: Math.round(totalHours * 100) / 100,
      grossPay: Math.round(grossPay * 100) / 100,
      isAutoGenerated: false
    });
  };

  const timeToMinutes = (timeStr: string) => {
    const [hours, minutes] = timeStr.split(':').map(Number);
    return hours * 60 + minutes;
  };

  return (
    <Form {...form}>
      <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-4">
        <div className="grid grid-cols-2 gap-4">
          <FormField
            control={form.control}
            name="entryDate"
            render={({ field }) => (
              <FormItem>
                <FormLabel>Date</FormLabel>
                <FormControl>
                  <Input type="date" {...field} />
                </FormControl>
                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="breakMinutes"
            render={({ field }) => (
              <FormItem>
                <FormLabel>Break (minutes)</FormLabel>
                <FormControl>
                  <Input type="number" {...field} onChange={e => field.onChange(Number(e.target.value))} />
                </FormControl>
                <FormMessage />
              </FormItem>
            )}
          />
        </div>

        <div className="grid grid-cols-2 gap-4">
          <FormField
            control={form.control}
            name="startTime"
            render={({ field }) => (
              <FormItem>
                <FormLabel>Start Time</FormLabel>
                <FormControl>
                  <Input type="time" {...field} />
                </FormControl>
                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="endTime"
            render={({ field }) => (
              <FormItem>
                <FormLabel>End Time</FormLabel>
                <FormControl>
                  <Input type="time" {...field} />
                </FormControl>
                <FormMessage />
              </FormItem>
            )}
          />
        </div>

        <FormField
          control={form.control}
          name="hourlyRate"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Hourly Rate ($)</FormLabel>
              <FormControl>
                <Input type="number" step="0.01" {...field} onChange={e => field.onChange(Number(e.target.value))} />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />

        <FormField
          control={form.control}
          name="notes"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Notes</FormLabel>
              <FormControl>
                <Textarea {...field} placeholder="Optional notes about this timesheet entry..." />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />

        <div className="flex gap-2 justify-end">
          <Button type="button" variant="outline" onClick={onCancel} disabled={loading}>
            Cancel
          </Button>
          <Button type="submit" disabled={loading}>
            {loading ? "Saving..." : "Save Entry"}
          </Button>
        </div>
      </form>
    </Form>
  );
}

export default function AdminTimesheetTabs() {
  const [searchTerm, setSearchTerm] = useState("");
  const [statusFilter, setStatusFilter] = useState("all");
  const [staffFilter, setStaffFilter] = useState("all");
  const [periodFilter, setPeriodFilter] = useState("all");
  const [selectedTimesheet, setSelectedTimesheet] = useState<AdminTimesheet | null>(null);
  const [editingEntry, setEditingEntry] = useState<TimesheetEntry | null>(null);
  const [isEditDialogOpen, setIsEditDialogOpen] = useState(false);
  
  const { user } = useAuth();
  const { toast } = useToast();
  const queryClient = useQueryClient();

  // Current Period Timesheets
  const { data: currentTimesheets = [], isLoading: loadingCurrent } = useQuery({
    queryKey: ["/api/admin/timesheets/current"],
    enabled: !!user && (user.role === "Admin" || user.role === "ConsoleManager")
  });

  // Historical Timesheets
  const { data: historicalTimesheets = [], isLoading: loadingHistory } = useQuery({
    queryKey: ["/api/admin/timesheets/history"],
    enabled: !!user && (user.role === "Admin" || user.role === "ConsoleManager")
  });

  // Payslip Ready Timesheets (approved, not paid yet)
  const { data: payslipTimesheets = [], isLoading: loadingPayslips } = useQuery({
    queryKey: ["/api/admin/payslips"],
    enabled: !!user && (user.role === "Admin" || user.role === "ConsoleManager")
  });

  // Staff Payslips (historical paid timesheets)
  const { data: staffPayslips = [], isLoading: loadingStaffPayslips } = useQuery({
    queryKey: ["/api/admin/staff-payslips"],
    enabled: !!user && (user.role === "Admin" || user.role === "ConsoleManager")
  });



  // Analytics Data
  const { data: analyticsData } = useQuery({
    queryKey: ["/api/admin/timesheet-analytics"],
    enabled: !!user && (user.role === "Admin" || user.role === "ConsoleManager")
  });

  // Get timesheet entries for editing
  const { data: timesheetEntriesData } = useQuery({
    queryKey: ["/api/admin/timesheet-entries", selectedTimesheet?.id],
    queryFn: () => selectedTimesheet ? fetch(`/api/admin/timesheet-entries/${selectedTimesheet.id}`, {
      credentials: 'include'
    }).then(res => res.json()) : [],
    enabled: !!selectedTimesheet
  });

  // Ensure timesheetEntries is always an array
  const timesheetEntries = Array.isArray(timesheetEntriesData) ? timesheetEntriesData : [];

  // Approve timesheet
  const approveTimesheet = useMutation({
    mutationFn: (timesheetId: number) => 
      apiRequest("POST", `/api/admin/timesheets/${timesheetId}/approve`),
    onSuccess: () => {
      toast({ title: "Timesheet approved successfully" });
      queryClient.invalidateQueries({ queryKey: ["/api/admin/timesheets/current"] });
      queryClient.invalidateQueries({ queryKey: ["/api/admin/timesheets/history"] });
      queryClient.invalidateQueries({ queryKey: ["/api/admin/payslips"] });
    }
  });

  // Reject timesheet
  const rejectTimesheet = useMutation({
    mutationFn: (timesheetId: number) => 
      apiRequest("POST", `/api/admin/timesheets/${timesheetId}/reject`),
    onSuccess: () => {
      toast({ title: "Timesheet rejected" });
      queryClient.invalidateQueries({ queryKey: ["/api/admin/timesheets/current"] });
    }
  });

  // Admin submit timesheet (for staff)
  const adminSubmitTimesheet = useMutation({
    mutationFn: (timesheetId: number) => 
      apiRequest("POST", `/api/admin/timesheets/${timesheetId}/submit`),
    onSuccess: () => {
      toast({ title: "Timesheet submitted successfully by admin" });
      queryClient.invalidateQueries({ queryKey: ["/api/admin/timesheets/current"] });
      queryClient.invalidateQueries({ queryKey: ["/api/admin/staff-timesheets"] });
      setShowTimesheetDetails(false);
    },
    onError: (error) => {
      toast({ 
        title: "Submission Failed", 
        description: "Failed to submit timesheet. Please try again.",
        variant: "destructive" 
      });
    }
  });

  // Update timesheet entry
  const updateEntry = useMutation({
    mutationFn: ({ entryId, data }: { entryId: number; data: Partial<TimesheetEntry> }) => 
      apiRequest("PATCH", `/api/admin/timesheet-entries/${entryId}`, data),
    onSuccess: () => {
      toast({ title: "Entry updated successfully" });
      queryClient.invalidateQueries({ queryKey: ["/api/admin/timesheet-entries"] });
      queryClient.invalidateQueries({ queryKey: ["/api/admin/timesheets/current"] });
      queryClient.invalidateQueries({ queryKey: ["/api/admin/timesheets/history"] });
      setIsEditDialogOpen(false);
      setEditingEntry(null);
    }
  });

  // Generate PDF payslip
  const generatePayslipPDF = useMutation({
    mutationFn: async (timesheetId: number) => {
      try {
        const response = await fetch(`/api/admin/timesheets/${timesheetId}/generate-payslip-pdf`, {
          method: 'POST',
          credentials: 'include',
        });
        
        if (!response.ok) {
          const errorText = await response.text();
          throw new Error(`Failed to generate payslip: ${errorText}`);
        }
        
        // Check if response is actually a PDF
        const contentType = response.headers.get('content-type');
        if (!contentType || !contentType.includes('application/pdf')) {
          throw new Error('Server did not return a PDF file');
        }
        
        return {
          blob: await response.blob(),
          timesheetId
        };
      } catch (error) {
        console.error('PDF generation error:', error);
        throw error;
      }
    },
    onSuccess: ({ blob, timesheetId }) => {
      try {
        // Find the timesheet data for the filename
        const timesheet = (payslipTimesheets as any[])?.find(t => t.id === timesheetId);
        const staffName = timesheet?.staffName?.replace(/[^a-zA-Z0-9]/g, '_') || 'staff';
        
        // Validate blob
        if (!blob || blob.size === 0) {
          throw new Error('Empty PDF file received');
        }
        
        // Create download link for PDF
        const url = window.URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.style.display = 'none';
        a.href = url;
        a.download = `payslip-${staffName}-${format(new Date(), 'yyyy-MM-dd')}.pdf`;
        
        // Add to DOM, click, then remove
        document.body.appendChild(a);
        a.click();
        
        // Clean up
        setTimeout(() => {
          window.URL.revokeObjectURL(url);
          document.body.removeChild(a);
        }, 100);
        
        toast({ title: "Payslip PDF downloaded successfully" });
        
        // Refresh the payslips data
        queryClient.invalidateQueries({ queryKey: ["/api/admin/payslips"] });
        queryClient.invalidateQueries({ queryKey: ["/api/admin/staff-payslips"] });
      } catch (error) {
        console.error('Download error:', error);
        toast({ 
          title: "Download failed", 
          description: "PDF was generated but download failed. Please try again.",
          variant: "destructive" 
        });
      }
    },
    onError: (error: any) => {
      console.error('Payslip generation error:', error);
      toast({ 
        title: "Failed to generate payslip", 
        description: error.message || "Please try again.",
        variant: "destructive" 
      });
    }
  });

  // Date range states for filtering
  const [payslipStartDate, setPayslipStartDate] = useState<string>("");
  const [payslipEndDate, setPayslipEndDate] = useState<string>("");
  const [staffPayslipStartDate, setStaffPayslipStartDate] = useState<string>("");
  const [staffPayslipEndDate, setStaffPayslipEndDate] = useState<string>("");

  // Enhanced filter function with date range support
  const filterTimesheets = (timesheets: any[], tabType: 'general' | 'payslips' | 'staff-payslips' = 'general') => {
    if (!Array.isArray(timesheets)) return [];
    
    // Get appropriate date filters based on tab
    const startDate = tabType === 'payslips' ? payslipStartDate : 
                     tabType === 'staff-payslips' ? staffPayslipStartDate : "";
    const endDate = tabType === 'payslips' ? payslipEndDate : 
                   tabType === 'staff-payslips' ? staffPayslipEndDate : "";
    
    return timesheets.filter(timesheet => {
      const matchesSearch = (timesheet.staffName || '').toLowerCase().includes(searchTerm.toLowerCase()) ||
                           (timesheet.staffUsername || timesheet.staffEmail || '').toLowerCase().includes(searchTerm.toLowerCase());
      const matchesStatus = statusFilter === "all" || timesheet.status === statusFilter;
      const matchesStaff = staffFilter === "all" || timesheet.userId.toString() === staffFilter;
      
      // Date range filtering based on pay period end or paid date
      let matchesDateRange = true;
      if (startDate || endDate) {
        const timesheetDate = new Date(timesheet.payPeriodEnd || timesheet.paidAt || timesheet.payPeriodStart);
        if (startDate && timesheetDate < new Date(startDate)) {
          matchesDateRange = false;
        }
        if (endDate && timesheetDate > new Date(endDate + 'T23:59:59')) {
          matchesDateRange = false;
        }
      }
      
      // For general tabs, keep existing period logic
      if (tabType === 'general') {
        const periodStart = timesheet.payPeriodStart ? new Date(timesheet.payPeriodStart) : new Date();
        const now = new Date();
        const currentPeriodStart = new Date(now.getFullYear(), now.getMonth(), now.getDate() - 14);
        const matchesPeriod = periodFilter === "all" || 
          (periodFilter === "current" && periodStart >= currentPeriodStart) ||
          (periodFilter === "previous" && periodStart < currentPeriodStart);
        
        return matchesSearch && matchesStatus && matchesStaff && matchesPeriod;
      }
      
      return matchesSearch && matchesStatus && matchesStaff && matchesDateRange;
    });
  };

  // Clear filters functions
  const clearPayslipFilters = () => {
    setSearchTerm("");
    setStaffFilter("all");
    setPayslipStartDate("");
    setPayslipEndDate("");
  };

  const clearStaffPayslipFilters = () => {
    setSearchTerm("");
    setStaffFilter("all");
    setStaffPayslipStartDate("");
    setStaffPayslipEndDate("");
  };

  // State for editing timesheet entries in Current Period
  const [showTimesheetDetails, setShowTimesheetDetails] = useState(false);
  const [currentTimesheetEntries, setCurrentTimesheetEntries] = useState<any[]>([]);
  const [editingCurrentEntry, setEditingCurrentEntry] = useState<any>(null);

  // Create Manual Entry mutation for Current Period
  const createManualEntry = useMutation({
    mutationFn: async (entryData: any) => {
      const response = await fetch('/api/admin/timesheet-entries/manual', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        credentials: 'include',
        body: JSON.stringify(entryData),
      });
      if (!response.ok) throw new Error('Failed to create manual entry');
      return response.json();
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ["/api/admin/timesheets/current"] });
      queryClient.invalidateQueries({ queryKey: ["/api/admin/timesheet-analytics"] });
      toast({ title: "Manual timesheet entry created successfully" });
      if (selectedTimesheet?.id) {
        loadTimesheetEntries(selectedTimesheet.id);
      }
    }
  });

  // Edit Current Period Entry mutation
  const editCurrentEntry = useMutation({
    mutationFn: async ({ entryId, updates }: { entryId: number; updates: any }) => {
      const response = await fetch(`/api/admin/timesheet-entries/${entryId}`, {
        method: 'PATCH',
        headers: { 'Content-Type': 'application/json' },
        credentials: 'include',
        body: JSON.stringify(updates),
      });
      if (!response.ok) throw new Error('Failed to update entry');
      return response.json();
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ["/api/admin/timesheets/current"] });
      queryClient.invalidateQueries({ queryKey: ["/api/admin/timesheet-analytics"] });
      toast({ title: "Timesheet entry updated successfully" });
      setEditingCurrentEntry(null);
      if (selectedTimesheet?.id) {
        loadTimesheetEntries(selectedTimesheet.id);
      }
    }
  });

  // Load timesheet entries for editing
  const loadTimesheetEntries = async (timesheetId: number) => {
    try {
      const response = await fetch(`/api/admin/timesheet-entries/${timesheetId}`, {
        credentials: 'include'
      });
      if (response.ok) {
        const entries = await response.json();
        setCurrentTimesheetEntries(entries);
      }
    } catch (error) {
      console.error('Failed to load timesheet entries:', error);
    }
  };

  // Calculate analytics from filtered data
  const calculateAnalytics = (timesheets: any[]) => {
    const filtered = filterTimesheets(timesheets);
    return {
      totalTimesheets: filtered.length,
      totalStaff: new Set(filtered.map(t => t.userId)).size,
      totalHours: filtered.reduce((sum, t) => sum + parseFloat(t.totalHours || '0'), 0),
      totalEarnings: filtered.reduce((sum, t) => sum + parseFloat(t.totalEarnings || '0'), 0),
      avgHoursPerStaff: filtered.length > 0 ? 
        filtered.reduce((sum, t) => sum + parseFloat(t.totalHours || '0'), 0) / new Set(filtered.map(t => t.userId)).size : 0,
      statusBreakdown: {
        draft: filtered.filter(t => t.status === 'draft').length,
        submitted: filtered.filter(t => t.status === 'submitted').length,
        approved: filtered.filter(t => t.status === 'approved').length,
        rejected: filtered.filter(t => t.status === 'rejected').length,
        paid: filtered.filter(t => t.status === 'paid').length
      }
    };
  };

  // Check if staff member is eligible for leave (non-casual as per Fair Work)
  const isLeaveEligible = (employmentType?: string) => {
    return employmentType === 'full-time' || employmentType === 'part-time';
  };

  const getStatusBadge = (status: string) => {
    switch (status) {
      case "draft": return <Badge variant="outline">Draft</Badge>;
      case "submitted": return <Badge className="bg-amber-500 text-white">Submitted</Badge>;
      case "approved": return <Badge className="bg-emerald-500 text-white">Approved</Badge>;
      case "rejected": return <Badge variant="destructive">Rejected</Badge>;
      case "paid": return <Badge className="bg-blue-500 text-white">Paid</Badge>;
      default: return <Badge variant="outline">{status}</Badge>;
    }
  };

  const uniqueStaff = [...new Set([...currentTimesheets, ...historicalTimesheets, ...payslipTimesheets]
    .map(t => ({ id: t.userId, name: t.staffName })))];

  const allTimesheets = [...(currentTimesheets || []), ...(historicalTimesheets || []), ...(payslipTimesheets || [])];
  const analytics = calculateAnalytics(allTimesheets);

  return (
    <div className="space-y-6">
      {/* Analytics Dashboard */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
        <Card>
          <CardContent className="p-4">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm text-slate-600">Total Timesheets</p>
                <p className="text-2xl font-bold text-navy-700">{analytics.totalTimesheets}</p>
              </div>
              <FileText className="h-8 w-8 text-blue-500" />
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardContent className="p-4">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm text-slate-600">Active Staff</p>
                <p className="text-2xl font-bold text-navy-700">{analytics.totalStaff}</p>
              </div>
              <Users className="h-8 w-8 text-emerald-500" />
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardContent className="p-4">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm text-slate-600">Total Hours</p>
                <p className="text-2xl font-bold text-navy-700">{analytics.totalHours.toFixed(1)}h</p>
              </div>
              <Clock className="h-8 w-8 text-amber-500" />
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardContent className="p-4">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm text-slate-600">Total Earnings</p>
                <p className="text-2xl font-bold text-navy-700">${analytics.totalEarnings.toFixed(2)}</p>
              </div>
              <DollarSign className="h-8 w-8 text-teal-500" />
            </div>
          </CardContent>
        </Card>
      </div>

      {/* Status Overview Cards */}
      <div className="grid grid-cols-2 md:grid-cols-5 gap-4">
        <Card className="bg-slate-50">
          <CardContent className="p-3 text-center">
            <p className="text-sm text-slate-600">Draft</p>
            <p className="text-xl font-bold">{analytics.statusBreakdown.draft}</p>
          </CardContent>
        </Card>
        <Card className="bg-amber-50">
          <CardContent className="p-3 text-center">
            <p className="text-sm text-amber-700">Submitted</p>
            <p className="text-xl font-bold text-amber-700">{analytics.statusBreakdown.submitted}</p>
          </CardContent>
        </Card>
        <Card className="bg-emerald-50">
          <CardContent className="p-3 text-center">
            <p className="text-sm text-emerald-700">Approved</p>
            <p className="text-xl font-bold text-emerald-700">{analytics.statusBreakdown.approved}</p>
          </CardContent>
        </Card>
        <Card className="bg-red-50">
          <CardContent className="p-3 text-center">
            <p className="text-sm text-red-700">Rejected</p>
            <p className="text-xl font-bold text-red-700">{analytics.statusBreakdown.rejected}</p>
          </CardContent>
        </Card>
        <Card className="bg-blue-50">
          <CardContent className="p-3 text-center">
            <p className="text-sm text-blue-700">Paid</p>
            <p className="text-xl font-bold text-blue-700">{analytics.statusBreakdown.paid}</p>
          </CardContent>
        </Card>
      </div>

      {/* Search and Filter Controls */}
      <Card>
        <CardContent className="p-4">
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
            <div className="relative">
              <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-slate-400 h-4 w-4" />
              <Input
                placeholder="Search by staff name or username..."
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                className="pl-10"
              />
            </div>
            <Select value={statusFilter} onValueChange={setStatusFilter}>
              <SelectTrigger>
                <SelectValue placeholder="Filter by status" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="all">All Statuses</SelectItem>
                <SelectItem value="draft">Draft</SelectItem>
                <SelectItem value="submitted">Submitted</SelectItem>
                <SelectItem value="approved">Approved</SelectItem>
                <SelectItem value="rejected">Rejected</SelectItem>
                <SelectItem value="paid">Paid</SelectItem>
              </SelectContent>
            </Select>
            <Select value={staffFilter} onValueChange={setStaffFilter}>
              <SelectTrigger>
                <SelectValue placeholder="Filter by staff" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="all">All Staff</SelectItem>
                {uniqueStaff.map(staff => (
                  <SelectItem key={staff.id} value={staff.id.toString()}>{staff.name}</SelectItem>
                ))}
              </SelectContent>
            </Select>
            <Select value={periodFilter} onValueChange={setPeriodFilter}>
              <SelectTrigger>
                <SelectValue placeholder="Filter by period" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="all">All Periods</SelectItem>
                <SelectItem value="current">Current Period</SelectItem>
                <SelectItem value="previous">Previous Periods</SelectItem>
              </SelectContent>
            </Select>
          </div>
          <div className="mt-4 flex items-center gap-4 text-sm text-slate-600">
            <span>Showing {analytics.totalTimesheets} timesheets</span>
            <Separator orientation="vertical" className="h-4" />
            <span>Avg hours per staff: {analytics.avgHoursPerStaff.toFixed(1)}h</span>
            <Separator orientation="vertical" className="h-4" />
            <span>Total payroll: ${analytics.totalEarnings.toFixed(2)}</span>
          </div>
        </CardContent>
      </Card>

      <Tabs defaultValue="current" className="space-y-4">
        <TabsList className="flex flex-wrap w-full gap-1 p-1 h-auto">
          <TabsTrigger value="current" className="text-xs sm:text-sm flex-shrink-0">Current Period</TabsTrigger>
          <TabsTrigger value="history" className="text-xs sm:text-sm flex-shrink-0">History</TabsTrigger>
          <TabsTrigger value="payslips" className="text-xs sm:text-sm flex-shrink-0">Payslips</TabsTrigger>
          <TabsTrigger value="staff-payslips" className="text-xs sm:text-sm flex-shrink-0">Staff Payslips</TabsTrigger>
          <TabsTrigger value="pay-scales" className="text-xs sm:text-sm flex-shrink-0">Pay Scales</TabsTrigger>
          <TabsTrigger value="wage-increases" className="text-xs sm:text-sm flex-shrink-0">Wage Increases</TabsTrigger>
        </TabsList>

        {/* Current Period Tab */}
        <TabsContent value="current">
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <Clock className="h-5 w-5" />
                Current Period Timesheets
              </CardTitle>
            </CardHeader>
            <CardContent>
              {loadingCurrent ? (
                <div className="text-center py-8 text-slate-500">Loading timesheets...</div>
              ) : (
                <div className="overflow-x-auto">
                  <Table>
                    <TableHeader>
                      <TableRow>
                        <TableHead>Staff Member</TableHead>
                        <TableHead>Pay Period</TableHead>
                        <TableHead>Hours</TableHead>
                        <TableHead>Gross Pay</TableHead>
                        <TableHead>Leave Accrued</TableHead>
                        <TableHead>Status</TableHead>
                        <TableHead>Actions</TableHead>
                      </TableRow>
                    </TableHeader>
                    <TableBody>
                      {filterTimesheets(currentTimesheets).map((timesheet) => (
                        <TableRow key={timesheet.id}>
                          <TableCell>
                            <div className="flex items-center gap-2">
                              <User className="h-4 w-4 text-slate-400" />
                              <div>
                                <div className="font-medium">{timesheet.staffName}</div>
                                <div className="text-sm text-slate-500">{timesheet.staffEmail}</div>
                              </div>
                            </div>
                          </TableCell>
                          <TableCell>
                            <div className="text-sm">
                              {format(new Date(timesheet.payPeriodStart), "MMM dd")} - {format(new Date(timesheet.payPeriodEnd), "MMM dd, yyyy")}
                            </div>
                          </TableCell>
                          <TableCell>{timesheet.totalHours}h</TableCell>
                          <TableCell>${timesheet.totalEarnings}</TableCell>
                          <TableCell>
                            {(timesheet.annualLeave || timesheet.sickLeave) ? (
                              <div className="text-sm">
                                <div>Annual: {timesheet.annualLeave || 0}h</div>
                                <div>Sick: {timesheet.sickLeave || 0}h</div>
                              </div>
                            ) : (
                              <span className="text-slate-400">-</span>
                            )}
                          </TableCell>
                          <TableCell>{getStatusBadge(timesheet.status)}</TableCell>
                          <TableCell>
                            <div className="flex gap-2">
                              <Button
                                size="sm"
                                variant="outline"
                                onClick={() => {
                                  setSelectedTimesheet(timesheet);
                                  setIsEditDialogOpen(true);
                                }}
                              >
                                {timesheet.status === "submitted" || timesheet.status === "approved" ? (
                                  <>
                                    <Eye className="h-4 w-4" />
                                    View
                                  </>
                                ) : (
                                  <>
                                    <Edit className="h-4 w-4" />
                                    Edit
                                  </>
                                )}
                              </Button>
                              <Button
                                size="sm"
                                variant="secondary"
                                onClick={async () => {
                                  setSelectedTimesheet(timesheet);
                                  await loadTimesheetEntries(timesheet.id);
                                  setShowTimesheetDetails(true);
                                }}
                              >
                                <Clock className="h-4 w-4" />
                                Edit Details
                              </Button>
                              {timesheet.status === "submitted" && (
                                <>
                                  <Button
                                    size="sm"
                                    onClick={() => approveTimesheet.mutate(timesheet.id)}
                                    disabled={approveTimesheet.isPending}
                                  >
                                    <CheckCircle className="h-4 w-4" />
                                  </Button>
                                  <Button
                                    size="sm"
                                    variant="destructive"
                                    onClick={() => rejectTimesheet.mutate(timesheet.id)}
                                    disabled={rejectTimesheet.isPending}
                                  >
                                    <AlertCircle className="h-4 w-4" />
                                  </Button>
                                </>
                              )}
                            </div>
                          </TableCell>
                        </TableRow>
                      ))}
                    </TableBody>
                  </Table>
                </div>
              )}
            </CardContent>
          </Card>
        </TabsContent>

        {/* History Tab */}
        <TabsContent value="history">
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <Calendar className="h-5 w-5" />
                Historical Timesheets
              </CardTitle>
            </CardHeader>
            <CardContent>
              {loadingHistory ? (
                <div className="text-center py-8 text-slate-500">Loading history...</div>
              ) : (
                <div className="overflow-x-auto">
                  <Table>
                    <TableHeader>
                      <TableRow>
                        <TableHead>Staff Member</TableHead>
                        <TableHead>Pay Period</TableHead>
                        <TableHead>Hours</TableHead>
                        <TableHead>Gross Pay</TableHead>
                        <TableHead>Leave Accrued</TableHead>
                        <TableHead>Status</TableHead>
                        <TableHead>Actions</TableHead>
                      </TableRow>
                    </TableHeader>
                    <TableBody>
                      {filterTimesheets(historicalTimesheets).map((timesheet) => (
                        <TableRow key={timesheet.id}>
                          <TableCell>
                            <div className="flex items-center gap-2">
                              <User className="h-4 w-4 text-slate-400" />
                              <div>
                                <div className="font-medium">{timesheet.staffName}</div>
                                <div className="text-sm text-slate-500">{timesheet.staffEmail}</div>
                              </div>
                            </div>
                          </TableCell>
                          <TableCell>
                            <div className="text-sm">
                              {format(new Date(timesheet.payPeriodStart), "MMM dd")} - {format(new Date(timesheet.payPeriodEnd), "MMM dd, yyyy")}
                            </div>
                          </TableCell>
                          <TableCell>{timesheet.totalHours}h</TableCell>
                          <TableCell>${timesheet.totalEarnings}</TableCell>
                          <TableCell>
                            {(timesheet.annualLeave || timesheet.sickLeave) ? (
                              <div className="text-sm">
                                <div>Annual: {timesheet.annualLeave || 0}h</div>
                                <div>Sick: {timesheet.sickLeave || 0}h</div>
                              </div>
                            ) : (
                              <span className="text-slate-400">-</span>
                            )}
                          </TableCell>
                          <TableCell>{getStatusBadge(timesheet.status)}</TableCell>
                          <TableCell>
                            <div className="flex gap-2">
                              <Button
                                size="sm"
                                variant="outline"
                                onClick={() => {
                                  setSelectedTimesheet(timesheet);
                                  setIsEditDialogOpen(true);
                                }}
                              >
                                {timesheet.status === "submitted" || timesheet.status === "approved" ? (
                                  <>
                                    <Eye className="h-4 w-4" />
                                    View
                                  </>
                                ) : (
                                  <>
                                    <Edit className="h-4 w-4" />
                                    Edit
                                  </>
                                )}
                              </Button>
                              {timesheet.status === "approved" && (
                                <Button
                                  size="sm"
                                  onClick={() => generatePayslipPDF.mutate(timesheet.id)}
                                  disabled={generatePayslipPDF.isPending}
                                >
                                  <FileDown className="h-4 w-4" />
                                </Button>
                              )}
                            </div>
                          </TableCell>
                        </TableRow>
                      ))}
                    </TableBody>
                  </Table>
                </div>
              )}
            </CardContent>
          </Card>
        </TabsContent>

        {/* Payslips Tab */}
        <TabsContent value="payslips">
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <FileText className="h-5 w-5" />
                Payslip Generation
              </CardTitle>
            </CardHeader>
            <CardContent>
              {/* Payslips Filters */}
              <div className="mb-6 p-4 bg-slate-50 rounded-lg">
                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
                  {/* Search */}
                  <div>
                    <label className="block text-sm font-medium text-slate-700 mb-1">Search Staff</label>
                    <Input
                      placeholder="Search by name or email..."
                      value={searchTerm}
                      onChange={(e) => setSearchTerm(e.target.value)}
                      className="text-sm"
                    />
                  </div>
                  
                  {/* Staff Filter */}
                  <div>
                    <label className="block text-sm font-medium text-slate-700 mb-1">Staff Member</label>
                    <Select value={staffFilter} onValueChange={setStaffFilter}>
                      <SelectTrigger className="text-sm">
                        <SelectValue placeholder="All Staff" />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="all">All Staff</SelectItem>
                        {Array.from(new Set((payslipTimesheets as any[])?.map(t => ({ id: t.userId, name: t.staffName })) || [])).map(staff => (
                          <SelectItem key={staff.id} value={staff.id.toString()}>{staff.name}</SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                  </div>

                  {/* Start Date */}
                  <div>
                    <label className="block text-sm font-medium text-slate-700 mb-1">Start Date</label>
                    <Input
                      type="date"
                      value={payslipStartDate}
                      onChange={(e) => setPayslipStartDate(e.target.value)}
                      className="text-sm"
                    />
                  </div>

                  {/* End Date */}
                  <div>
                    <label className="block text-sm font-medium text-slate-700 mb-1">End Date</label>
                    <Input
                      type="date"
                      value={payslipEndDate}
                      onChange={(e) => setPayslipEndDate(e.target.value)}
                      className="text-sm"
                    />
                  </div>
                </div>
                
                <div className="flex justify-between items-center mt-4">
                  <div className="text-sm text-slate-600">
                    Showing {filterTimesheets(payslipTimesheets, 'payslips').length} of {(payslipTimesheets as any[])?.length || 0} payslips
                  </div>
                  <Button
                    variant="outline"
                    size="sm"
                    onClick={clearPayslipFilters}
                    className="text-xs"
                  >
                    Clear Filters
                  </Button>
                </div>
              </div>
              {loadingPayslips ? (
                <div className="text-center py-8 text-slate-500">Loading payslips...</div>
              ) : !Array.isArray(payslipTimesheets) || payslipTimesheets.length === 0 ? (
                <div className="text-center py-8 text-slate-500">
                  No approved timesheets ready for payslip generation.
                </div>
              ) : filterTimesheets(payslipTimesheets, 'payslips').length === 0 ? (
                <div className="text-center py-8 text-slate-500">
                  No payslips match your current filters. Found {(payslipTimesheets as any[])?.length || 0} total approved timesheets.
                </div>
              ) : (
                <div className="overflow-x-auto">
                  <Table>
                    <TableHeader>
                      <TableRow>
                        <TableHead>Staff Member</TableHead>
                        <TableHead>Pay Period</TableHead>
                        <TableHead>Hours</TableHead>
                        <TableHead>Gross Pay</TableHead>
                        <TableHead>Tax</TableHead>
                        <TableHead>Super</TableHead>
                        <TableHead>Net Pay</TableHead>
                        <TableHead>Actions</TableHead>
                      </TableRow>
                    </TableHeader>
                    <TableBody>
                      {filterTimesheets(payslipTimesheets, 'payslips').map((timesheet) => (
                        <TableRow key={timesheet.id}>
                          <TableCell>
                            <div className="flex items-center gap-2">
                              <User className="h-4 w-4 text-slate-400" />
                              <div>
                                <div className="font-medium">{timesheet.staffName}</div>
                                <div className="text-sm text-slate-500">{timesheet.staffEmail}</div>
                              </div>
                            </div>
                          </TableCell>
                          <TableCell>
                            <div className="text-sm">
                              {format(new Date(timesheet.payPeriodStart), "MMM dd")} - {format(new Date(timesheet.payPeriodEnd), "MMM dd, yyyy")}
                            </div>
                          </TableCell>
                          <TableCell>{timesheet.totalHours}h</TableCell>
                          <TableCell>${timesheet.totalEarnings}</TableCell>
                          <TableCell>${timesheet.totalTax}</TableCell>
                          <TableCell>${timesheet.totalSuper}</TableCell>
                          <TableCell className="font-medium">${timesheet.netPay}</TableCell>
                          <TableCell>
                            <Button
                              size="sm"
                              onClick={() => generatePayslipPDF.mutate(timesheet.id)}
                              disabled={generatePayslipPDF.isPending}
                              className="flex items-center gap-2"
                            >
                              <Download className="h-4 w-4" />
                              Generate PDF
                            </Button>
                          </TableCell>
                        </TableRow>
                      ))}
                    </TableBody>
                  </Table>
                </div>
              )}
            </CardContent>
          </Card>
        </TabsContent>

        {/* Staff Payslips Tab */}
        <TabsContent value="staff-payslips">
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <DollarSign className="h-5 w-5" />
                Staff Payslips (Historical)
              </CardTitle>
            </CardHeader>
            <CardContent>
              {/* Staff Payslips Filters */}
              <div className="mb-6 p-4 bg-slate-50 rounded-lg">
                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
                  {/* Search */}
                  <div>
                    <label className="block text-sm font-medium text-slate-700 mb-1">Search Staff</label>
                    <Input
                      placeholder="Search by name or email..."
                      value={searchTerm}
                      onChange={(e) => setSearchTerm(e.target.value)}
                      className="text-sm"
                    />
                  </div>
                  
                  {/* Staff Filter */}
                  <div>
                    <label className="block text-sm font-medium text-slate-700 mb-1">Staff Member</label>
                    <Select value={staffFilter} onValueChange={setStaffFilter}>
                      <SelectTrigger className="text-sm">
                        <SelectValue placeholder="All Staff" />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="all">All Staff</SelectItem>
                        {Array.from(new Set((staffPayslips as any[])?.map(t => ({ id: t.userId, name: t.staffName })) || [])).map(staff => (
                          <SelectItem key={staff.id} value={staff.id.toString()}>{staff.name}</SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                  </div>

                  {/* Start Date */}
                  <div>
                    <label className="block text-sm font-medium text-slate-700 mb-1">Start Date</label>
                    <Input
                      type="date"
                      value={staffPayslipStartDate}
                      onChange={(e) => setStaffPayslipStartDate(e.target.value)}
                      className="text-sm"
                    />
                  </div>

                  {/* End Date */}
                  <div>
                    <label className="block text-sm font-medium text-slate-700 mb-1">End Date</label>
                    <Input
                      type="date"
                      value={staffPayslipEndDate}
                      onChange={(e) => setStaffPayslipEndDate(e.target.value)}
                      className="text-sm"
                    />
                  </div>
                </div>
                
                <div className="flex justify-between items-center mt-4">
                  <div className="text-sm text-slate-600">
                    Showing {filterTimesheets(staffPayslips, 'staff-payslips').length} of {(staffPayslips as any[])?.length || 0} historical payslips
                  </div>
                  <Button
                    variant="outline"
                    size="sm"
                    onClick={clearStaffPayslipFilters}
                    className="text-xs"
                  >
                    Clear Filters
                  </Button>
                </div>
              </div>
              {loadingStaffPayslips ? (
                <div className="text-center py-8 text-slate-500">Loading historical payslips...</div>
              ) : !Array.isArray(staffPayslips) || staffPayslips.length === 0 ? (
                <div className="text-center py-8 text-slate-500">
                  No historical payslips found.
                </div>
              ) : (
                <div className="overflow-x-auto">
                  <Table>
                    <TableHeader>
                      <TableRow>
                        <TableHead>Staff Member</TableHead>
                        <TableHead>Pay Period</TableHead>
                        <TableHead>Hours</TableHead>
                        <TableHead>Gross Pay</TableHead>
                        <TableHead>Net Pay</TableHead>
                        <TableHead>Paid Date</TableHead>
                        <TableHead>Status</TableHead>
                      </TableRow>
                    </TableHeader>
                    <TableBody>
                      {filterTimesheets(staffPayslips, 'staff-payslips').map((timesheet) => (
                        <TableRow key={timesheet.id}>
                          <TableCell>
                            <div className="flex items-center gap-2">
                              <User className="h-4 w-4 text-slate-400" />
                              <div>
                                <div className="font-medium">{timesheet.staffName}</div>
                                <div className="text-sm text-slate-500">{timesheet.staffEmail}</div>
                              </div>
                            </div>
                          </TableCell>
                          <TableCell>
                            <div className="text-sm">
                              {format(new Date(timesheet.payPeriodStart), "MMM dd")} - {format(new Date(timesheet.payPeriodEnd), "MMM dd, yyyy")}
                            </div>
                          </TableCell>
                          <TableCell>{timesheet.totalHours}h</TableCell>
                          <TableCell>${timesheet.totalEarnings}</TableCell>
                          <TableCell className="font-medium">${timesheet.netPay}</TableCell>
                          <TableCell>
                            {timesheet.paidAt ? format(new Date(timesheet.paidAt), "MMM dd, yyyy") : "N/A"}
                          </TableCell>
                          <TableCell>
                            <span className="inline-flex items-center px-2 py-1 rounded-full text-xs bg-green-100 text-green-800">
                              Paid
                            </span>
                          </TableCell>
                        </TableRow>
                      ))}
                    </TableBody>
                  </Table>
                </div>
              )}
            </CardContent>
          </Card>
        </TabsContent>

        {/* Pay Scales Tab */}
        <TabsContent value="pay-scales">
          <PayScaleManagement />
        </TabsContent>

        {/* Wage Increases Tab */}
        <TabsContent value="wage-increases">
          <WageIncreaseManager />
        </TabsContent>
      </Tabs>

      {/* Edit Timesheet Dialog */}
      <Dialog open={isEditDialogOpen} onOpenChange={setIsEditDialogOpen}>
        <DialogContent className="max-w-4xl">
          <DialogHeader>
            <DialogTitle>
              {selectedTimesheet && (selectedTimesheet.status === "submitted" || selectedTimesheet.status === "approved") 
                ? `View Timesheet - ${selectedTimesheet.staffName}`
                : `Edit Timesheet - ${selectedTimesheet?.staffName}`
              }
            </DialogTitle>
          </DialogHeader>
          <div className="space-y-4">
            {selectedTimesheet && (
              <div className="grid grid-cols-2 gap-4 p-4 bg-slate-50 rounded-lg">
                <div>
                  <span className="text-sm text-slate-600">Pay Period:</span>
                  <div className="font-medium">
                    {format(new Date(selectedTimesheet.payPeriodStart), "MMM dd")} - {format(new Date(selectedTimesheet.payPeriodEnd), "MMM dd, yyyy")}
                  </div>
                </div>
                <div>
                  <span className="text-sm text-slate-600">Current Status:</span>
                  <div>{getStatusBadge(selectedTimesheet.status)}</div>
                </div>
              </div>
            )}

            <div className="max-h-96 overflow-y-auto">
              <Table>
                <TableHeader>
                  <TableRow>
                    <TableHead>Date</TableHead>
                    <TableHead>Shift</TableHead>
                    <TableHead>Client</TableHead>
                    <TableHead>Hours</TableHead>
                    <TableHead>Rate</TableHead>
                    <TableHead>Earnings</TableHead>
                    <TableHead>Type</TableHead>
                    <TableHead>Actions</TableHead>
                  </TableRow>
                </TableHeader>
                <TableBody>
                  {timesheetEntries.map((entry) => (
                    <TableRow key={entry.id}>
                      <TableCell>{format(new Date(entry.entryDate), "MMM dd")}</TableCell>
                      <TableCell>
                        <div className="font-medium">{entry.shiftTitle || 'General Shift'}</div>
                        <div className="text-xs text-gray-500">
                          {entry.startTime && entry.endTime && (
                            `${format(new Date(entry.startTime), 'h:mm a')} - ${format(new Date(entry.endTime), 'h:mm a')}`
                          )}
                        </div>
                      </TableCell>
                      <TableCell>
                        <div className="flex items-center gap-2">
                          <User className="h-4 w-4 text-gray-400" />
                          {entry.clientName || '-'}
                        </div>
                      </TableCell>
                      <TableCell>
                        <div className="font-medium">{entry.totalHours}h</div>
                        {entry.breakMinutes > 0 && (
                          <div className="text-xs text-gray-500">
                            -{entry.breakMinutes}min break
                          </div>
                        )}
                      </TableCell>
                      <TableCell>
                        <div className="font-medium">${entry.hourlyRate || 0}/hr</div>
                      </TableCell>
                      <TableCell>
                        <div className="font-bold text-emerald-600">${entry.grossPay}</div>
                      </TableCell>
                      <TableCell>
                        <Badge variant={entry.isAutoGenerated ? "default" : "secondary"} className="text-xs">
                          {entry.isAutoGenerated ? "Auto" : "Manual"}
                        </Badge>
                      </TableCell>
                      <TableCell>
                        <Button
                          size="sm"
                          variant="outline"
                          onClick={() => setEditingEntry(entry)}
                        >
                          <Edit className="h-4 w-4" />
                        </Button>
                      </TableCell>
                    </TableRow>
                  ))}
                </TableBody>
              </Table>
            </div>
          </div>
        </DialogContent>
      </Dialog>

      {/* Timesheet Details Editor Modal for Current Period */}
      <Dialog open={showTimesheetDetails} onOpenChange={setShowTimesheetDetails}>
        <DialogContent className="max-w-6xl max-h-[90vh] overflow-y-auto">
          <DialogHeader>
            <DialogTitle className="flex items-center gap-2">
              <Clock className="h-5 w-5" />
              Edit Timesheet Details - {selectedTimesheet?.staffName}
            </DialogTitle>
            <div className="text-sm text-slate-600">
              Pay Period: {selectedTimesheet && format(new Date(selectedTimesheet.payPeriodStart), "MMM dd")} - {selectedTimesheet && format(new Date(selectedTimesheet.payPeriodEnd), "MMM dd, yyyy")}
            </div>
          </DialogHeader>
          
          <div className="space-y-6">
            {/* Timesheet Summary */}
            {selectedTimesheet && (
              <Card>
                <CardHeader>
                  <CardTitle className="text-lg">Timesheet Summary</CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
                    <div>
                      <div className="text-sm text-slate-600">Total Hours</div>
                      <div className="text-xl font-semibold">{selectedTimesheet.totalHours}h</div>
                    </div>
                    <div>
                      <div className="text-sm text-slate-600">Gross Pay</div>
                      <div className="text-xl font-semibold">${selectedTimesheet.totalEarnings}</div>
                    </div>
                    <div>
                      <div className="text-sm text-slate-600">Status</div>
                      <div>{getStatusBadge(selectedTimesheet.status)}</div>
                    </div>
                    <div>
                      <div className="text-sm text-slate-600">Leave Accrued</div>
                      <div className="text-sm">
                        <div>Annual: {selectedTimesheet.annualLeave || 0}h</div>
                        <div>Sick: {selectedTimesheet.sickLeave || 0}h</div>
                      </div>
                    </div>
                  </div>
                </CardContent>
              </Card>
            )}

            {/* Timesheet Entries */}
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center justify-between">
                  <span>Timesheet Entries</span>
                  <Button
                    size="sm"
                    onClick={() => {
                      // Create manual entry form logic here
                      const newEntry = {
                        timesheetId: selectedTimesheet?.id,
                        entryDate: new Date().toISOString().split('T')[0],
                        startTime: '09:00',
                        endTime: '17:00',
                        breakMinutes: 30,
                        hourlyRate: 25.41,
                        notes: '',
                        isAutoGenerated: false
                      };
                      setEditingCurrentEntry(newEntry);
                    }}
                  >
                    <Plus className="h-4 w-4" />
                    Add Manual Entry
                  </Button>
                </CardTitle>
              </CardHeader>
              <CardContent>
                <div className="overflow-x-auto">
                  <Table>
                    <TableHeader>
                      <TableRow>
                        <TableHead>Date</TableHead>
                        <TableHead>Time</TableHead>
                        <TableHead>Break</TableHead>
                        <TableHead>Hours</TableHead>
                        <TableHead>Rate</TableHead>
                        <TableHead>Gross Pay</TableHead>
                        <TableHead>Source</TableHead>
                        <TableHead>Actions</TableHead>
                      </TableRow>
                    </TableHeader>
                    <TableBody>
                      {currentTimesheetEntries.map((entry) => (
                        <TableRow key={`current-${entry.id}`}>
                          <TableCell>
                            <div className="text-sm">
                              {format(new Date(entry.entryDate), "MMM dd, yyyy")}
                            </div>
                          </TableCell>
                          <TableCell>
                            <div className="text-sm">
                              {entry.startTime} - {entry.endTime}
                            </div>
                          </TableCell>
                          <TableCell>{entry.breakMinutes || 0} min</TableCell>
                          <TableCell>{entry.totalHours || 0}h</TableCell>
                          <TableCell>${entry.hourlyRate || 0}</TableCell>
                          <TableCell>${entry.grossPay || 0}</TableCell>
                          <TableCell>
                            <Badge variant={entry.isAutoGenerated ? "default" : "secondary"}>
                              {entry.isAutoGenerated ? "Auto" : "Manual"}
                            </Badge>
                          </TableCell>
                          <TableCell>
                            <div className="flex gap-2">
                              <Button
                                size="sm"
                                variant="outline"
                                onClick={() => setEditingCurrentEntry(entry)}
                                disabled={selectedTimesheet?.status === "approved"}
                              >
                                <Edit className="h-4 w-4" />
                              </Button>
                              {!entry.isAutoGenerated && (
                                <Button
                                  size="sm"
                                  variant="outline"
                                  className="text-red-600 hover:text-red-700"
                                  onClick={async () => {
                                    if (confirm('Delete this manual entry?')) {
                                      try {
                                        const response = await fetch(`/api/admin/timesheet-entries/${entry.id}`, {
                                          method: 'DELETE',
                                          credentials: 'include'
                                        });
                                        if (response.ok) {
                                          await loadTimesheetEntries(selectedTimesheet!.id);
                                          queryClient.invalidateQueries({ queryKey: ["/api/admin/timesheets/current"] });
                                          toast({ title: "Entry deleted successfully" });
                                        }
                                      } catch (error) {
                                        toast({ title: "Failed to delete entry", variant: "destructive" });
                                      }
                                    }
                                  }}
                                  disabled={selectedTimesheet?.status === "approved"}
                                >
                                  <Trash2 className="h-4 w-4" />
                                </Button>
                              )}
                            </div>
                          </TableCell>
                        </TableRow>
                      ))}
                    </TableBody>
                  </Table>
                </div>
              </CardContent>
            </Card>
            
            {/* Submit Timesheet Section for Draft Status */}
            {selectedTimesheet && selectedTimesheet.status === 'draft' && (
              <Card className="mt-4">
                <CardHeader>
                  <CardTitle className="text-lg">Submit Timesheet</CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="flex items-center justify-between">
                    <div>
                      <p className="text-sm text-slate-600">
                        Submit this timesheet on behalf of {selectedTimesheet.staffName} for approval.
                      </p>
                      <div className="mt-2 text-xs text-slate-500">
                        Total Hours: {selectedTimesheet.totalHours}h | Total Earnings: ${selectedTimesheet.totalEarnings}
                      </div>
                    </div>
                    <Button
                      onClick={() => adminSubmitTimesheet.mutate(selectedTimesheet.id)}
                      disabled={adminSubmitTimesheet.isPending}
                      className="bg-blue-600 hover:bg-blue-700"
                    >
                      <CheckCircle className="h-4 w-4 mr-2" />
                      {adminSubmitTimesheet.isPending ? 'Submitting...' : 'Submit for Approval'}
                    </Button>
                  </div>
                </CardContent>
              </Card>
            )}
          </div>
        </DialogContent>
      </Dialog>

      {/* Edit Entry Modal */}
      {editingCurrentEntry && (
        <Dialog open={!!editingCurrentEntry} onOpenChange={() => setEditingCurrentEntry(null)}>
          <DialogContent>
            <DialogHeader>
              <DialogTitle>
                {editingCurrentEntry.id ? 'Edit Timesheet Entry' : 'Add Manual Entry'}
              </DialogTitle>
            </DialogHeader>
            <TimesheetEntryForm
              entry={editingCurrentEntry}
              onSave={async (entryData) => {
                try {
                  if (editingCurrentEntry.id) {
                    // Update existing entry
                    await editCurrentEntry.mutateAsync({
                      entryId: editingCurrentEntry.id,
                      updates: entryData
                    });
                  } else {
                    // Create new manual entry
                    await createManualEntry.mutateAsync({
                      ...entryData,
                      timesheetId: selectedTimesheet?.id
                    });
                  }
                } catch (error) {
                  toast({ 
                    title: "Failed to save entry", 
                    variant: "destructive" 
                  });
                }
              }}
              onCancel={() => setEditingCurrentEntry(null)}
              loading={editCurrentEntry.isPending || createManualEntry.isPending}
            />
          </DialogContent>
        </Dialog>
      )}
    </div>
  );
}