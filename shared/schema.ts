import { pgTable, text, serial, integer, boolean, timestamp, jsonb, decimal } from "drizzle-orm/pg-core";
import { relations } from "drizzle-orm";
import { createInsertSchema } from "drizzle-zod";
import { z } from "zod";

// Companies table
export const companies = pgTable("companies", {
  id: text("id").primaryKey(), // UUID generated by crypto.randomUUID()
  name: text("name").notNull(),
  businessAddress: text("business_address"),
  registrationNumber: text("registration_number"),
  primaryContactName: text("primary_contact_name").notNull(),
  primaryContactEmail: text("primary_contact_email").notNull(),
  primaryContactPhone: text("primary_contact_phone"),
  createdAt: timestamp("created_at").defaultNow().notNull(),
});

// Tenants table
export const tenants = pgTable("tenants", {
  id: serial("id").primaryKey(),
  name: text("name").notNull(),
  type: text("type").notNull(),
  settings: jsonb("settings").default({}),
  companyId: text("company_id").references(() => companies.id),
  createdAt: timestamp("created_at").defaultNow().notNull(),
});

// Users table with tenant association
export const users = pgTable("users", {
  id: serial("id").primaryKey(),
  username: text("username").notNull().unique(),
  password: text("password").notNull(),
  email: text("email"),
  fullName: text("full_name").notNull(),
  role: text("role").notNull().default("staff"), // admin, staff, viewer
  tenantId: integer("tenant_id").notNull().references(() => tenants.id),
  isActive: boolean("is_active").default(true),
  isFirstLogin: boolean("is_first_login").default(true),
  createdAt: timestamp("created_at").defaultNow().notNull(),
});

// Clients table
export const clients = pgTable("clients", {
  id: serial("id").primaryKey(),
  clientId: text("client_id").notNull().unique(), // Auto-generated unique ID
  firstName: text("first_name").notNull(),
  lastName: text("last_name").notNull(),
  fullName: text("full_name").notNull(),
  ndisNumber: text("ndis_number").notNull(),
  dateOfBirth: timestamp("date_of_birth").notNull(),
  address: text("address"),
  emergencyContactName: text("emergency_contact_name"),
  emergencyContactPhone: text("emergency_contact_phone"),
  ndisGoals: text("ndis_goals"),
  likesPreferences: text("likes_preferences"),
  dislikesAversions: text("dislikes_aversions"),
  allergiesMedicalAlerts: text("allergies_medical_alerts"),
  primaryDiagnosis: text("primary_diagnosis"),
  tenantId: integer("tenant_id").notNull().references(() => tenants.id),
  companyId: text("company_id").notNull(), // For tenant isolation
  createdBy: integer("created_by").notNull().references(() => users.id),
  isActive: boolean("is_active").default(true),
  createdAt: timestamp("created_at").defaultNow().notNull(),
  updatedAt: timestamp("updated_at").defaultNow().notNull(),
});

// Form templates table
export const formTemplates = pgTable("form_templates", {
  id: serial("id").primaryKey(),
  name: text("name").notNull(),
  description: text("description"),
  fields: jsonb("fields").notNull().default([]),
  tenantId: integer("tenant_id").notNull().references(() => tenants.id),
  createdBy: integer("created_by").notNull().references(() => users.id),
  isActive: boolean("is_active").default(true),
  createdAt: timestamp("created_at").defaultNow().notNull(),
});

// Form submissions table
export const formSubmissions = pgTable("form_submissions", {
  id: serial("id").primaryKey(),
  templateId: integer("template_id").notNull().references(() => formTemplates.id),
  clientId: integer("client_id").references(() => clients.id),
  submittedBy: integer("submitted_by").notNull().references(() => users.id),
  data: jsonb("data").notNull().default({}),
  status: text("status").notNull().default("completed"), // pending, completed
  tenantId: integer("tenant_id").notNull().references(() => tenants.id),
  createdAt: timestamp("created_at").defaultNow().notNull(),
});

// Shifts table
export const shifts = pgTable("shifts", {
  id: serial("id").primaryKey(),
  userId: integer("user_id").references(() => users.id), // Made nullable for unassigned shifts
  clientId: integer("client_id").references(() => clients.id),
  title: text("title"),
  description: text("description"),
  startTime: timestamp("start_time").notNull(),
  endTime: timestamp("end_time"),
  status: text("status").default("assigned"), // assigned, requested, in-progress, completed, cancelled
  location: text("location"),
  latitude: decimal("latitude", { precision: 10, scale: 8 }),
  longitude: decimal("longitude", { precision: 11, scale: 8 }),
  building: text("building"),
  floor: text("floor"),
  // Shift tracking fields
  startTimestamp: timestamp("start_timestamp"),
  endTimestamp: timestamp("end_timestamp"),
  startLocation: text("start_location"),
  endLocation: text("end_location"),
  handoverReceivedFromStaffId: integer("handover_received_from_staff_id").references(() => users.id),
  handoverGivenToStaffId: integer("handover_given_to_staff_id").references(() => users.id),
  handoverNotesIn: text("handover_notes_in"),
  handoverNotesOut: text("handover_notes_out"),
  isActive: boolean("is_active").default(true),
  seriesId: text("series_id"), // For grouping recurring shifts
  tenantId: integer("tenant_id").notNull().references(() => tenants.id),
  createdAt: timestamp("created_at").defaultNow().notNull(),
});

// Staff Availability table
export const staffAvailability = pgTable("staff_availability", {
  id: serial("id").primaryKey(),
  availabilityId: text("availability_id").notNull().unique(),
  userId: integer("user_id").notNull().references(() => users.id),
  companyId: integer("company_id").notNull().references(() => tenants.id),
  availability: jsonb("availability").notNull(), // {Monday: ["AM", "PM"], Tuesday: ["Active Night"], ...}
  patternName: text("pattern_name"), // For saved quick patterns
  isQuickPattern: boolean("is_quick_pattern").default(false),
  overrideByManager: boolean("override_by_manager").default(false),
  isActive: boolean("is_active").default(true),
  tenantId: integer("tenant_id").notNull().references(() => tenants.id),
  createdAt: timestamp("created_at").defaultNow().notNull(),
  updatedAt: timestamp("updated_at").defaultNow().notNull(),
});

// Case Notes table
export const caseNotes = pgTable("case_notes", {
  id: serial("id").primaryKey(),
  clientId: integer("client_id").notNull().references(() => clients.id),
  userId: integer("user_id").notNull().references(() => users.id),
  tenantId: integer("tenant_id").notNull().references(() => tenants.id),
  title: text("title").notNull(),
  content: text("content").notNull(),
  type: text("type").notNull().default("standard"), // standard, incident, medication
  category: text("category").notNull().default("Progress Note"),
  priority: text("priority").notNull().default("normal"), // normal, high, urgent
  tags: text("tags").array().default([]),
  linkedShiftId: integer("linked_shift_id").references(() => shifts.id),
  attachments: jsonb("attachments").default([]),
  incidentData: jsonb("incident_data"),
  medicationData: jsonb("medication_data"),
  createdAt: timestamp("created_at").notNull().defaultNow(),
  updatedAt: timestamp("updated_at").notNull().defaultNow(),
});

// Hourly Observations table
export const hourlyObservations = pgTable("hourly_observations", {
  id: serial("id").primaryKey(),
  clientId: integer("client_id").notNull().references(() => clients.id),
  userId: integer("user_id").notNull().references(() => users.id),
  tenantId: integer("tenant_id").notNull().references(() => tenants.id),
  observationType: text("observation_type").notNull(), // behaviour, adl, health, social, communication
  subtype: text("subtype"), // specific subcategory based on type
  notes: text("notes").notNull(),
  intensity: integer("intensity"), // 1-5 for behaviour observations
  timestamp: timestamp("timestamp").notNull(),
  createdAt: timestamp("created_at").defaultNow().notNull(),
  updatedAt: timestamp("updated_at").defaultNow().notNull(),
});

// Medication Plans table
export const medicationPlans = pgTable("medication_plans", {
  id: serial("id").primaryKey(),
  clientId: integer("client_id").notNull().references(() => clients.id),
  medicationName: text("medication_name").notNull(),
  dosage: text("dosage").notNull(),
  frequency: text("frequency").notNull(),
  route: text("route").notNull(), // oral, injection, topical, etc.
  timeOfDay: text("time_of_day"),
  startDate: timestamp("start_date").notNull(),
  endDate: timestamp("end_date"),
  prescribedBy: text("prescribed_by").notNull(),
  instructions: text("instructions"),
  sideEffects: text("side_effects").array().default([]),
  status: text("status").notNull().default("active"), // active, inactive, discontinued
  createdBy: integer("created_by").notNull().references(() => users.id),
  tenantId: integer("tenant_id").notNull().references(() => tenants.id),
  createdAt: timestamp("created_at").defaultNow().notNull(),
  updatedAt: timestamp("updated_at").defaultNow().notNull(),
});

// Medication Records table
export const medicationRecords = pgTable("medication_records", {
  id: serial("id").primaryKey(),
  medicationPlanId: integer("medication_plan_id").references(() => medicationPlans.id), // Made nullable for manual entries
  clientId: integer("client_id").notNull().references(() => clients.id),
  administeredBy: integer("administered_by").notNull().references(() => users.id),
  medicationName: text("medication_name"), // Added for direct medication name - nullable initially
  scheduledTime: timestamp("scheduled_time"),
  actualTime: timestamp("actual_time"),
  dateTime: timestamp("date_time"), // New field for administration date/time - nullable initially
  timeOfDay: text("time_of_day"), // Morning, Afternoon, Night - nullable initially
  route: text("route"), // Oral, Injection, Topical, Other - nullable initially
  status: text("status"), // Administered, Refused, Missed - nullable initially
  result: text("result").notNull(), // administered, refused, missed, delayed (legacy field)
  notes: text("notes"),
  refusalReason: text("refusal_reason"),
  wasWitnessed: boolean("was_witnessed").default(false),
  attachmentBeforeUrl: text("attachment_before_url"), // Photo before administration
  attachmentAfterUrl: text("attachment_after_url"), // Photo after administration
  tenantId: integer("tenant_id").notNull().references(() => tenants.id),
  createdAt: timestamp("created_at").defaultNow().notNull(),
});

// Activity logs table
export const activityLogs = pgTable("activity_logs", {
  id: serial("id").primaryKey(),
  userId: integer("user_id").notNull().references(() => users.id),
  action: text("action").notNull(),
  resourceType: text("resource_type").notNull(),
  resourceId: integer("resource_id"),
  description: text("description").notNull(),
  metadata: jsonb("metadata").default({}),
  tenantId: integer("tenant_id").notNull().references(() => tenants.id),
  createdAt: timestamp("created_at").defaultNow().notNull(),
});

// Incident Reports table
export const incidentReports = pgTable("incident_reports", {
  id: serial("id").primaryKey(),
  incidentId: text("incident_id").notNull().unique(),
  clientId: integer("client_id").notNull().references(() => clients.id),
  staffId: integer("staff_id").notNull().references(() => users.id),
  dateTime: timestamp("date_time").notNull(),
  location: text("location").notNull(),
  witnessName: text("witness_name"),
  witnessPhone: text("witness_phone"),
  types: text("types").array().notNull(),
  isNDISReportable: boolean("is_ndis_reportable").default(false),
  triggers: jsonb("triggers").default([]), // [{ label: string, notes?: string }]
  intensityRating: integer("intensity_rating").notNull(),
  staffResponses: jsonb("staff_responses").default([]), // [{ label: string, notes?: string }]
  description: text("description").notNull(),
  externalRef: text("external_ref"),
  status: text("status").notNull().default("Open"), // "Open", "Closed"
  tenantId: integer("tenant_id").notNull().references(() => tenants.id),
  createdAt: timestamp("created_at").defaultNow().notNull(),
  updatedAt: timestamp("updated_at").defaultNow().notNull(),
});

// Incident Closures table
export const incidentClosures = pgTable("incident_closures", {
  id: serial("id").primaryKey(),
  incidentId: text("incident_id").notNull().unique(),
  closedBy: integer("closed_by").notNull().references(() => users.id),
  closureDate: timestamp("closure_date").notNull(),
  controlReview: boolean("control_review").notNull(),
  improvements: text("improvements"),
  implemented: boolean("implemented").notNull(),
  controlLevel: text("control_level").notNull(), // "Elimination", "Engineering", "Behavioural", "Admin", "PPE", "None"
  wasLTI: text("was_lti").notNull(), // "yes", "no", "NA"
  hazard: text("hazard").notNull(), // "Behavioural", "Medical", "Environmental", "Other"
  severity: text("severity").notNull(), // "Low", "Medium", "High", "Critical"
  externalNotice: boolean("external_notice").notNull(),
  participantContext: text("participant_context").notNull(), // "yes", "no", "NA"
  supportPlanAvailable: text("support_plan_available").notNull(), // "yes", "no", "NA"
  reviewType: text("review_type").notNull(), // "Root Cause", "Case Conference", "Support Team Review", "Corrective Action", "No Further Action"
  outcome: text("outcome"),
  attachments: jsonb("attachments").default([]),
  tenantId: integer("tenant_id").notNull().references(() => tenants.id),
  createdAt: timestamp("created_at").defaultNow().notNull(),
});

// Relations
export const companiesRelations = relations(companies, ({ many }) => ({
  tenants: many(tenants),
}));

export const tenantsRelations = relations(tenants, ({ one, many }) => ({
  company: one(companies, {
    fields: [tenants.companyId],
    references: [companies.id],
  }),
  users: many(users),
  clients: many(clients),
  formTemplates: many(formTemplates),
  formSubmissions: many(formSubmissions),
  shifts: many(shifts),
  staffAvailability: many(staffAvailability),
  caseNotes: many(caseNotes),
  activityLogs: many(activityLogs),
}));

export const usersRelations = relations(users, ({ one, many }) => ({
  tenant: one(tenants, {
    fields: [users.tenantId],
    references: [tenants.id],
  }),
  createdClients: many(clients),
  createdFormTemplates: many(formTemplates),
  formSubmissions: many(formSubmissions),
  shifts: many(shifts),
  availability: many(staffAvailability),
  caseNotes: many(caseNotes),
  activityLogs: many(activityLogs),
  observations: many(hourlyObservations),
  createdMedicationPlans: many(medicationPlans),
  medicationRecords: many(medicationRecords),
  incidentReports: many(incidentReports),
  incidentClosures: many(incidentClosures),
}));

export const clientsRelations = relations(clients, ({ one, many }) => ({
  tenant: one(tenants, {
    fields: [clients.tenantId],
    references: [tenants.id],
  }),
  createdBy: one(users, {
    fields: [clients.createdBy],
    references: [users.id],
  }),
  formSubmissions: many(formSubmissions),
  caseNotes: many(caseNotes),
  shifts: many(shifts),
  observations: many(hourlyObservations),
  medicationPlans: many(medicationPlans),
  medicationRecords: many(medicationRecords),
  incidentReports: many(incidentReports),
}));

export const formTemplatesRelations = relations(formTemplates, ({ one, many }) => ({
  tenant: one(tenants, {
    fields: [formTemplates.tenantId],
    references: [tenants.id],
  }),
  createdBy: one(users, {
    fields: [formTemplates.createdBy],
    references: [users.id],
  }),
  submissions: many(formSubmissions),
}));

export const formSubmissionsRelations = relations(formSubmissions, ({ one }) => ({
  template: one(formTemplates, {
    fields: [formSubmissions.templateId],
    references: [formTemplates.id],
  }),
  client: one(clients, {
    fields: [formSubmissions.clientId],
    references: [clients.id],
  }),
  submittedBy: one(users, {
    fields: [formSubmissions.submittedBy],
    references: [users.id],
  }),
  tenant: one(tenants, {
    fields: [formSubmissions.tenantId],
    references: [tenants.id],
  }),
}));

export const shiftsRelations = relations(shifts, ({ one, many }) => ({
  user: one(users, {
    fields: [shifts.userId],
    references: [users.id],
  }),
  client: one(clients, {
    fields: [shifts.clientId],
    references: [clients.id],
  }),
  tenant: one(tenants, {
    fields: [shifts.tenantId],
    references: [tenants.id],
  }),
  linkedCaseNotes: many(caseNotes),
}));

export const caseNotesRelations = relations(caseNotes, ({ one }) => ({
  client: one(clients, {
    fields: [caseNotes.clientId],
    references: [clients.id],
  }),
  user: one(users, {
    fields: [caseNotes.userId],
    references: [users.id],
  }),
  tenant: one(tenants, {
    fields: [caseNotes.tenantId],
    references: [tenants.id],
  }),
  linkedShift: one(shifts, {
    fields: [caseNotes.linkedShiftId],
    references: [shifts.id],
  }),
}));

export const staffAvailabilityRelations = relations(staffAvailability, ({ one }) => ({
  user: one(users, {
    fields: [staffAvailability.userId],
    references: [users.id],
  }),
  company: one(tenants, {
    fields: [staffAvailability.companyId],
    references: [tenants.id],
  }),
}));

export const hourlyObservationsRelations = relations(hourlyObservations, ({ one }) => ({
  client: one(clients, {
    fields: [hourlyObservations.clientId],
    references: [clients.id],
  }),
  user: one(users, {
    fields: [hourlyObservations.userId],
    references: [users.id],
  }),
  tenant: one(tenants, {
    fields: [hourlyObservations.tenantId],
    references: [tenants.id],
  }),
}));

export const activityLogsRelations = relations(activityLogs, ({ one }) => ({
  user: one(users, {
    fields: [activityLogs.userId],
    references: [users.id],
  }),
  tenant: one(tenants, {
    fields: [activityLogs.tenantId],
    references: [tenants.id],
  }),
}));

export const medicationPlansRelations = relations(medicationPlans, ({ one, many }) => ({
  client: one(clients, {
    fields: [medicationPlans.clientId],
    references: [clients.id],
  }),
  createdBy: one(users, {
    fields: [medicationPlans.createdBy],
    references: [users.id],
  }),
  tenant: one(tenants, {
    fields: [medicationPlans.tenantId],
    references: [tenants.id],
  }),
  records: many(medicationRecords),
}));

export const medicationRecordsRelations = relations(medicationRecords, ({ one }) => ({
  medicationPlan: one(medicationPlans, {
    fields: [medicationRecords.medicationPlanId],
    references: [medicationPlans.id],
  }),
  client: one(clients, {
    fields: [medicationRecords.clientId],
    references: [clients.id],
  }),
  administeredBy: one(users, {
    fields: [medicationRecords.administeredBy],
    references: [users.id],
  }),
  tenant: one(tenants, {
    fields: [medicationRecords.tenantId],
    references: [tenants.id],
  }),
}));

export const incidentReportsRelations = relations(incidentReports, ({ one }) => ({
  client: one(clients, {
    fields: [incidentReports.clientId],
    references: [clients.id],
  }),
  staff: one(users, {
    fields: [incidentReports.staffId],
    references: [users.id],
  }),
  tenant: one(tenants, {
    fields: [incidentReports.tenantId],
    references: [tenants.id],
  }),
}));

export const incidentClosuresRelations = relations(incidentClosures, ({ one }) => ({
  closedBy: one(users, {
    fields: [incidentClosures.closedBy],
    references: [users.id],
  }),
  tenant: one(tenants, {
    fields: [incidentClosures.tenantId],
    references: [tenants.id],
  }),
}));

// Staff Messages table
export const staffMessages = pgTable("staff_messages", {
  id: serial("id").primaryKey(),
  senderId: integer("sender_id").notNull().references(() => users.id),
  recipientIds: integer("recipient_ids").array().notNull(),
  subject: text("subject").notNull(),
  body: text("body").notNull(),
  messageType: text("message_type").notNull().default("quick"), // quick, urgent
  attachments: jsonb("attachments").default([]),
  replyToId: integer("reply_to_id"),
  isRead: jsonb("is_read").default({}), // Object mapping userId to read status
  tenantId: integer("tenant_id").notNull().references(() => tenants.id),
  createdAt: timestamp("created_at").notNull().defaultNow(),
  updatedAt: timestamp("updated_at").notNull().defaultNow(),
});

export const staffMessagesRelations = relations(staffMessages, ({ one }) => ({
  sender: one(users, {
    fields: [staffMessages.senderId],
    references: [users.id],
  }),
  tenant: one(tenants, {
    fields: [staffMessages.tenantId],
    references: [tenants.id],
  }),
}));

// Hour Allocations table
export const hourAllocations = pgTable("hour_allocations", {
  id: serial("id").primaryKey(),
  staffId: integer("staff_id").notNull().references(() => users.id),
  tenantId: integer("tenant_id").notNull().references(() => tenants.id),
  allocationPeriod: text("allocation_period").notNull(), // "weekly" | "fortnightly"
  maxHours: decimal("max_hours", { precision: 5, scale: 2 }).notNull(),
  hoursUsed: decimal("hours_used", { precision: 5, scale: 2 }).default("0").notNull(),
  remainingHours: decimal("remaining_hours", { precision: 5, scale: 2 }).notNull(),
  isActive: boolean("is_active").default(true),
  createdAt: timestamp("created_at").defaultNow().notNull(),
  updatedAt: timestamp("updated_at").defaultNow().notNull(),
});

export const hourAllocationsRelations = relations(hourAllocations, ({ one }) => ({
  staff: one(users, {
    fields: [hourAllocations.staffId],
    references: [users.id],
  }),
  tenant: one(tenants, {
    fields: [hourAllocations.tenantId],
    references: [tenants.id],
  }),
}));

// Custom Roles table - for dynamically created roles
export const customRoles = pgTable("custom_roles", {
  id: serial("id").primaryKey(),
  name: text("name").notNull(), // e.g., "Senior Support Worker", "Clinical Coordinator"
  displayName: text("display_name").notNull(),
  description: text("description"),
  basedOnRole: text("based_on_role"), // Reference to built-in role it extends
  isActive: boolean("is_active").default(true),
  tenantId: integer("tenant_id").notNull().references(() => tenants.id),
  createdBy: integer("created_by").notNull().references(() => users.id),
  createdAt: timestamp("created_at").defaultNow().notNull(),
  updatedAt: timestamp("updated_at").defaultNow().notNull(),
});

// Custom Permissions table - for permission overrides and custom role permissions
export const customPermissions = pgTable("custom_permissions", {
  id: serial("id").primaryKey(),
  roleId: integer("role_id").references(() => customRoles.id), // For custom roles
  builtInRole: text("built_in_role"), // For overriding built-in roles
  module: text("module").notNull(), // e.g., "clients", "shifts", "medications"
  actions: jsonb("actions").notNull(), // Array of allowed actions
  scope: text("scope").notNull(), // "global", "company", "assigned"
  conditions: jsonb("conditions"), // Additional conditions for permission
  isOverride: boolean("is_override").default(false), // True if overriding default permission
  tenantId: integer("tenant_id").notNull().references(() => tenants.id),
  createdBy: integer("created_by").notNull().references(() => users.id),
  createdAt: timestamp("created_at").defaultNow().notNull(),
  updatedAt: timestamp("updated_at").defaultNow().notNull(),
});

// User Role Assignments table - for assigning custom roles to users
export const userRoleAssignments = pgTable("user_role_assignments", {
  id: serial("id").primaryKey(),
  userId: integer("user_id").notNull().references(() => users.id),
  roleId: integer("role_id").references(() => customRoles.id), // Custom role
  builtInRole: text("built_in_role"), // Built-in role override
  assignedBy: integer("assigned_by").notNull().references(() => users.id),
  assignedAt: timestamp("assigned_at").defaultNow().notNull(),
  expiresAt: timestamp("expires_at"), // Optional expiration
  isActive: boolean("is_active").default(true),
  tenantId: integer("tenant_id").notNull().references(() => tenants.id),
});

// Relations for new tables
export const customRolesRelations = relations(customRoles, ({ one, many }) => ({
  tenant: one(tenants, {
    fields: [customRoles.tenantId],
    references: [tenants.id],
  }),
  createdBy: one(users, {
    fields: [customRoles.createdBy],
    references: [users.id],
  }),
  permissions: many(customPermissions),
  assignments: many(userRoleAssignments),
}));

export const customPermissionsRelations = relations(customPermissions, ({ one }) => ({
  role: one(customRoles, {
    fields: [customPermissions.roleId],
    references: [customRoles.id],
  }),
  tenant: one(tenants, {
    fields: [customPermissions.tenantId],
    references: [tenants.id],
  }),
  createdBy: one(users, {
    fields: [customPermissions.createdBy],
    references: [users.id],
  }),
}));

export const userRoleAssignmentsRelations = relations(userRoleAssignments, ({ one }) => ({
  user: one(users, {
    fields: [userRoleAssignments.userId],
    references: [users.id],
  }),
  role: one(customRoles, {
    fields: [userRoleAssignments.roleId],
    references: [customRoles.id],
  }),
  assignedBy: one(users, {
    fields: [userRoleAssignments.assignedBy],
    references: [users.id],
  }),
  tenant: one(tenants, {
    fields: [userRoleAssignments.tenantId],
    references: [tenants.id],
  }),
}));

// Insert schemas
export const insertCompanySchema = createInsertSchema(companies).omit({
  id: true,
  createdAt: true,
});

export const insertTenantSchema = createInsertSchema(tenants).omit({
  id: true,
  createdAt: true,
});

export const insertUserSchema = createInsertSchema(users).omit({
  id: true,
  createdAt: true,
});

export const insertClientSchema = createInsertSchema(clients).omit({
  id: true,
  clientId: true,
  fullName: true,
  createdAt: true,
  updatedAt: true,
}).extend({
  firstName: z.string().min(1, "First name is required"),
  lastName: z.string().min(1, "Last name is required"),
  ndisNumber: z.string().min(1, "NDIS number is required"),
  dateOfBirth: z.date({ required_error: "Date of birth is required" }),
});

export const insertFormTemplateSchema = createInsertSchema(formTemplates).omit({
  id: true,
  createdAt: true,
});

export const insertFormSubmissionSchema = createInsertSchema(formSubmissions).omit({
  id: true,
  createdAt: true,
});

export const insertShiftSchema = createInsertSchema(shifts).omit({
  id: true,
  createdAt: true,
});

export const insertStaffAvailabilitySchema = createInsertSchema(staffAvailability).omit({
  id: true,
  createdAt: true,
  updatedAt: true,
});

export const insertCaseNoteSchema = createInsertSchema(caseNotes).omit({
  id: true,
  createdAt: true,
  updatedAt: true,
});

export const insertHourlyObservationSchema = createInsertSchema(hourlyObservations).omit({
  id: true,
  createdAt: true,
  updatedAt: true,
});

export const insertActivityLogSchema = createInsertSchema(activityLogs).omit({
  id: true,
  createdAt: true,
});

export const insertMedicationPlanSchema = createInsertSchema(medicationPlans).omit({
  id: true,
  createdAt: true,
  updatedAt: true,
});

export const insertMedicationRecordSchema = createInsertSchema(medicationRecords).omit({
  id: true,
  createdAt: true,
});

export const insertIncidentReportSchema = createInsertSchema(incidentReports).omit({
  id: true,
  createdAt: true,
  updatedAt: true,
});

export const insertIncidentClosureSchema = createInsertSchema(incidentClosures).omit({
  id: true,
  createdAt: true,
});

export const insertStaffMessageSchema = createInsertSchema(staffMessages).omit({
  id: true,
  createdAt: true,
  updatedAt: true,
});

export const insertHourAllocationSchema = createInsertSchema(hourAllocations).omit({
  id: true,
  hoursUsed: true,
  remainingHours: true,
  createdAt: true,
  updatedAt: true,
}).extend({
  maxHours: z.number().min(1, "Max hours must be at least 1").max(168, "Max hours cannot exceed 168 hours per week"),
  allocationPeriod: z.enum(["weekly", "fortnightly"], { required_error: "Allocation period is required" }),
});

export const insertCustomRoleSchema = createInsertSchema(customRoles).omit({
  id: true,
  createdAt: true,
  updatedAt: true,
  tenantId: true,  // Backend will add this
  createdBy: true, // Backend will add this
}).extend({
  name: z.string().min(2, "Role name must be at least 2 characters").max(50, "Role name cannot exceed 50 characters"),
  displayName: z.string().min(2, "Display name must be at least 2 characters").max(100, "Display name cannot exceed 100 characters"),
  basedOnRole: z.enum(["SupportWorker", "TeamLeader", "Coordinator", "Admin"]).optional(),
  description: z.string().optional(),
});

export const insertCustomPermissionSchema = createInsertSchema(customPermissions).omit({
  id: true,
  createdAt: true,
  updatedAt: true,
}).extend({
  actions: z.array(z.string()).min(1, "At least one action is required"),
  scope: z.enum(["global", "company", "assigned"], { required_error: "Scope is required" }),
});

export const insertUserRoleAssignmentSchema = createInsertSchema(userRoleAssignments).omit({
  id: true,
  assignedAt: true,
}).extend({
  expiresAt: z.date().optional(),
});

// Types
export type Company = typeof companies.$inferSelect;
export type InsertCompany = z.infer<typeof insertCompanySchema>;

export type Tenant = typeof tenants.$inferSelect;
export type InsertTenant = z.infer<typeof insertTenantSchema>;

export type User = typeof users.$inferSelect;
export type InsertUser = z.infer<typeof insertUserSchema>;

export type Client = typeof clients.$inferSelect;
export type InsertClient = z.infer<typeof insertClientSchema>;

export type FormTemplate = typeof formTemplates.$inferSelect;
export type InsertFormTemplate = z.infer<typeof insertFormTemplateSchema>;

export type FormSubmission = typeof formSubmissions.$inferSelect;
export type InsertFormSubmission = z.infer<typeof insertFormSubmissionSchema>;

export type Shift = typeof shifts.$inferSelect;
export type InsertShift = z.infer<typeof insertShiftSchema>;

export type StaffAvailability = typeof staffAvailability.$inferSelect;
export type InsertStaffAvailability = z.infer<typeof insertStaffAvailabilitySchema>;

export type CaseNote = typeof caseNotes.$inferSelect;
export type InsertCaseNote = z.infer<typeof insertCaseNoteSchema>;

export type HourlyObservation = typeof hourlyObservations.$inferSelect;
export type InsertHourlyObservation = z.infer<typeof insertHourlyObservationSchema>;

export type ActivityLog = typeof activityLogs.$inferSelect;
export type InsertActivityLog = z.infer<typeof insertActivityLogSchema>;

export type MedicationPlan = typeof medicationPlans.$inferSelect;
export type InsertMedicationPlan = z.infer<typeof insertMedicationPlanSchema>;

export type MedicationRecord = typeof medicationRecords.$inferSelect;
export type InsertMedicationRecord = z.infer<typeof insertMedicationRecordSchema>;

export type IncidentReport = typeof incidentReports.$inferSelect;
export type InsertIncidentReport = z.infer<typeof insertIncidentReportSchema>;

export type IncidentClosure = typeof incidentClosures.$inferSelect;
export type InsertIncidentClosure = z.infer<typeof insertIncidentClosureSchema>;

export type StaffMessage = typeof staffMessages.$inferSelect;
export type InsertStaffMessage = z.infer<typeof insertStaffMessageSchema>;

export type HourAllocation = typeof hourAllocations.$inferSelect;
export type InsertHourAllocation = z.infer<typeof insertHourAllocationSchema>;

export type CustomRole = typeof customRoles.$inferSelect;
export type InsertCustomRole = z.infer<typeof insertCustomRoleSchema>;

export type CustomPermission = typeof customPermissions.$inferSelect;
export type InsertCustomPermission = z.infer<typeof insertCustomPermissionSchema>;

export type UserRoleAssignment = typeof userRoleAssignments.$inferSelect;
export type InsertUserRoleAssignment = z.infer<typeof insertUserRoleAssignmentSchema>;
